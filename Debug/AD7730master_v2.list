
AD7730master_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000382c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a3c  08003a3c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08003a3c  08003a3c  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a3c  08003a3c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08003a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200000b0  08003af4  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08003af4  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008526  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a6  00000000  00000000  000285ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000730  00000000  00000000  00029fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  0002a6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015cea  00000000  00000000  0002ad20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000775a  00000000  00000000  00040a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078670  00000000  00000000  00048164  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c07d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aa8  00000000  00000000  000c0850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000b0 	.word	0x200000b0
 8000200:	00000000 	.word	0x00000000
 8000204:	080039f8 	.word	0x080039f8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000b4 	.word	0x200000b4
 8000220:	080039f8 	.word	0x080039f8

08000224 <ad7730_softreset>:
  uint8_t filter_register[3] = {0x80,0x03, 0x10}; //Max filter and skip
  //uint8_t filter_register[3] = {0x20,0x01, 0x00}; //Conservative
  ad7730_write_register(device, REG_FILTER_REGISTER, filter_register, device_infos);
}

void ad7730_softreset(uint8_t device, struct Transducer_SS_Info device_infos[]) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(device_infos[device].ss_port, device_infos[device].ss_pin, GPIO_PIN_RESET);
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	00db      	lsls	r3, r3, #3
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	4413      	add	r3, r2
 8000238:	6858      	ldr	r0, [r3, #4]
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	00db      	lsls	r3, r3, #3
 800023e:	683a      	ldr	r2, [r7, #0]
 8000240:	4413      	add	r3, r2
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	2200      	movs	r2, #0
 8000246:	4619      	mov	r1, r3
 8000248:	f001 ff8d 	bl	8002166 <HAL_GPIO_WritePin>

  uint8_t command[4] = { 0xFF, 0xFF, 0xFF, 0xFF};
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <ad7730_softreset+0x60>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	60fb      	str	r3, [r7, #12]
  HAL_SPI_Transmit(&hspi2, command, 4, 10);
 8000252:	f107 010c 	add.w	r1, r7, #12
 8000256:	230a      	movs	r3, #10
 8000258:	2204      	movs	r2, #4
 800025a:	480b      	ldr	r0, [pc, #44]	; (8000288 <ad7730_softreset+0x64>)
 800025c:	f002 fc01 	bl	8002a62 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(device_infos[device].ss_port, device_infos[device].ss_pin, GPIO_PIN_SET);
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	00db      	lsls	r3, r3, #3
 8000264:	683a      	ldr	r2, [r7, #0]
 8000266:	4413      	add	r3, r2
 8000268:	6858      	ldr	r0, [r3, #4]
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	00db      	lsls	r3, r3, #3
 800026e:	683a      	ldr	r2, [r7, #0]
 8000270:	4413      	add	r3, r2
 8000272:	881b      	ldrh	r3, [r3, #0]
 8000274:	2201      	movs	r2, #1
 8000276:	4619      	mov	r1, r3
 8000278:	f001 ff75 	bl	8002166 <HAL_GPIO_WritePin>
}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	08003a14 	.word	0x08003a14
 8000288:	20000198 	.word	0x20000198

0800028c <ad7730_set_communication_mode>:

void ad7730_internal_zero_scale_calibration(uint8_t device, struct Transducer_SS_Info device_infos[]) {

}

void ad7730_set_communication_mode(uint8_t device, AD7730_CommunicationTypeDef com_type, AD7730_RegisterTypeDef reg_type, struct Transducer_SS_Info device_infos[]) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	4603      	mov	r3, r0
 8000296:	71fb      	strb	r3, [r7, #7]
 8000298:	460b      	mov	r3, r1
 800029a:	71bb      	strb	r3, [r7, #6]
 800029c:	4613      	mov	r3, r2
 800029e:	717b      	strb	r3, [r7, #5]

  uint8_t command[1] = { com_type | reg_type };
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	797b      	ldrb	r3, [r7, #5]
 80002a4:	4313      	orrs	r3, r2
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	733b      	strb	r3, [r7, #12]
  HAL_SPI_Transmit(&hspi2, command, 1, 10);
 80002aa:	f107 010c 	add.w	r1, r7, #12
 80002ae:	230a      	movs	r3, #10
 80002b0:	2201      	movs	r2, #1
 80002b2:	4803      	ldr	r0, [pc, #12]	; (80002c0 <ad7730_set_communication_mode+0x34>)
 80002b4:	f002 fbd5 	bl	8002a62 <HAL_SPI_Transmit>

}
 80002b8:	bf00      	nop
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000198 	.word	0x20000198

080002c4 <ad7730_read_register>:

void ad7730_read_register(uint8_t device, AD7730_RegisterTypeDef reg, uint8_t data[], struct Transducer_SS_Info device_infos[]) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60ba      	str	r2, [r7, #8]
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	4603      	mov	r3, r0
 80002d0:	73fb      	strb	r3, [r7, #15]
 80002d2:	460b      	mov	r3, r1
 80002d4:	73bb      	strb	r3, [r7, #14]

  HAL_GPIO_TogglePin(device_infos[device].ss_port, device_infos[device].ss_pin);
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	00db      	lsls	r3, r3, #3
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	4413      	add	r3, r2
 80002de:	6858      	ldr	r0, [r3, #4]
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	4619      	mov	r1, r3
 80002ec:	f001 ff53 	bl	8002196 <HAL_GPIO_TogglePin>

  ad7730_set_communication_mode(device, OP_READ, reg, device_infos);
 80002f0:	7bba      	ldrb	r2, [r7, #14]
 80002f2:	7bf8      	ldrb	r0, [r7, #15]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2110      	movs	r1, #16
 80002f8:	f7ff ffc8 	bl	800028c <ad7730_set_communication_mode>

  HAL_SPI_Receive(&hspi2, data, AD7730_REGISTER_SIZE[reg], 10);
 80002fc:	7bbb      	ldrb	r3, [r7, #14]
 80002fe:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <ad7730_read_register+0x6c>)
 8000300:	5cd3      	ldrb	r3, [r2, r3]
 8000302:	b29a      	uxth	r2, r3
 8000304:	230a      	movs	r3, #10
 8000306:	68b9      	ldr	r1, [r7, #8]
 8000308:	480a      	ldr	r0, [pc, #40]	; (8000334 <ad7730_read_register+0x70>)
 800030a:	f002 fcde 	bl	8002cca <HAL_SPI_Receive>

  HAL_GPIO_TogglePin(device_infos[device].ss_port, device_infos[device].ss_pin);
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	6858      	ldr	r0, [r3, #4]
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	00db      	lsls	r3, r3, #3
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	4413      	add	r3, r2
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	4619      	mov	r1, r3
 8000324:	f001 ff37 	bl	8002196 <HAL_GPIO_TogglePin>

}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000044 	.word	0x20000044
 8000334:	20000198 	.word	0x20000198

08000338 <ad7730_write_register>:

void ad7730_write_register(uint8_t device, AD7730_RegisterTypeDef reg, uint8_t data[], struct Transducer_SS_Info device_infos[]) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
 800033e:	60ba      	str	r2, [r7, #8]
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	4603      	mov	r3, r0
 8000344:	73fb      	strb	r3, [r7, #15]
 8000346:	460b      	mov	r3, r1
 8000348:	73bb      	strb	r3, [r7, #14]

  HAL_GPIO_TogglePin(device_infos[device].ss_port, device_infos[device].ss_pin);
 800034a:	7bfb      	ldrb	r3, [r7, #15]
 800034c:	00db      	lsls	r3, r3, #3
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	4413      	add	r3, r2
 8000352:	6858      	ldr	r0, [r3, #4]
 8000354:	7bfb      	ldrb	r3, [r7, #15]
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4413      	add	r3, r2
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	4619      	mov	r1, r3
 8000360:	f001 ff19 	bl	8002196 <HAL_GPIO_TogglePin>

  ad7730_set_communication_mode(device, OP_WRITE, reg, device_infos);
 8000364:	7bba      	ldrb	r2, [r7, #14]
 8000366:	7bf8      	ldrb	r0, [r7, #15]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2100      	movs	r1, #0
 800036c:	f7ff ff8e 	bl	800028c <ad7730_set_communication_mode>

  HAL_SPI_Transmit(&hspi2, data, AD7730_REGISTER_SIZE[reg], 10);
 8000370:	7bbb      	ldrb	r3, [r7, #14]
 8000372:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <ad7730_write_register+0x6c>)
 8000374:	5cd3      	ldrb	r3, [r2, r3]
 8000376:	b29a      	uxth	r2, r3
 8000378:	230a      	movs	r3, #10
 800037a:	68b9      	ldr	r1, [r7, #8]
 800037c:	480a      	ldr	r0, [pc, #40]	; (80003a8 <ad7730_write_register+0x70>)
 800037e:	f002 fb70 	bl	8002a62 <HAL_SPI_Transmit>

  HAL_GPIO_TogglePin(device_infos[device].ss_port, device_infos[device].ss_pin);
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	00db      	lsls	r3, r3, #3
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	6858      	ldr	r0, [r3, #4]
 800038c:	7bfb      	ldrb	r3, [r7, #15]
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	4413      	add	r3, r2
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	4619      	mov	r1, r3
 8000398:	f001 fefd 	bl	8002196 <HAL_GPIO_TogglePin>

}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000044 	.word	0x20000044
 80003a8:	20000198 	.word	0x20000198

080003ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_DMA_Init+0x48>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <MX_DMA_Init+0x48>)
 80003b8:	f043 0302 	orr.w	r3, r3, #2
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <MX_DMA_Init+0x48>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f003 0302 	and.w	r3, r3, #2
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 1, 0);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2101      	movs	r1, #1
 80003ce:	2038      	movs	r0, #56	; 0x38
 80003d0:	f001 f8c9 	bl	8001566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80003d4:	2038      	movs	r0, #56	; 0x38
 80003d6:	f001 f8e2 	bl	800159e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 1, 0);
 80003da:	2200      	movs	r2, #0
 80003dc:	2101      	movs	r1, #1
 80003de:	2039      	movs	r0, #57	; 0x39
 80003e0:	f001 f8c1 	bl	8001566 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80003e4:	2039      	movs	r0, #57	; 0x39
 80003e6:	f001 f8da 	bl	800159e <HAL_NVIC_EnableIRQ>

}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40021000 	.word	0x40021000

080003f8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800040c:	4b51      	ldr	r3, [pc, #324]	; (8000554 <MX_GPIO_Init+0x15c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a50      	ldr	r2, [pc, #320]	; (8000554 <MX_GPIO_Init+0x15c>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b4e      	ldr	r3, [pc, #312]	; (8000554 <MX_GPIO_Init+0x15c>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0310 	and.w	r3, r3, #16
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000424:	4b4b      	ldr	r3, [pc, #300]	; (8000554 <MX_GPIO_Init+0x15c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a4a      	ldr	r2, [pc, #296]	; (8000554 <MX_GPIO_Init+0x15c>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b48      	ldr	r3, [pc, #288]	; (8000554 <MX_GPIO_Init+0x15c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b45      	ldr	r3, [pc, #276]	; (8000554 <MX_GPIO_Init+0x15c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a44      	ldr	r2, [pc, #272]	; (8000554 <MX_GPIO_Init+0x15c>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b42      	ldr	r3, [pc, #264]	; (8000554 <MX_GPIO_Init+0x15c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b3f      	ldr	r3, [pc, #252]	; (8000554 <MX_GPIO_Init+0x15c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a3e      	ldr	r2, [pc, #248]	; (8000554 <MX_GPIO_Init+0x15c>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <MX_GPIO_Init+0x15c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	603b      	str	r3, [r7, #0]
 800046a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|CS4_Pin, GPIO_PIN_SET);
 800046c:	2201      	movs	r2, #1
 800046e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000472:	4839      	ldr	r0, [pc, #228]	; (8000558 <MX_GPIO_Init+0x160>)
 8000474:	f001 fe77 	bl	8002166 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS0_Pin|CS1_Pin|CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800047e:	4837      	ldr	r0, [pc, #220]	; (800055c <MX_GPIO_Init+0x164>)
 8000480:	f001 fe71 	bl	8002166 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC0 PC1
                           PC2 PC3 PC4 PC5
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000484:	f64b 433f 	movw	r3, #48191	; 0xbc3f
 8000488:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048a:	2303      	movs	r3, #3
 800048c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	4831      	ldr	r0, [pc, #196]	; (800055c <MX_GPIO_Init+0x164>)
 8000496:	f001 fce5 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEV0_RDY_Pin;
 800049a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800049e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a0:	2300      	movs	r3, #0
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DEV0_RDY_GPIO_Port, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	482b      	ldr	r0, [pc, #172]	; (800055c <MX_GPIO_Init+0x164>)
 80004b0:	f001 fcd8 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA4
                           PA5 PA6 PA7 PA9
                           PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80004b4:	f641 63f7 	movw	r3, #7927	; 0x1ef7
 80004b8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ba:	2303      	movs	r3, #3
 80004bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	4824      	ldr	r0, [pc, #144]	; (8000558 <MX_GPIO_Init+0x160>)
 80004c6:	f001 fccd 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RESET_Pin|CS4_Pin;
 80004ca:	f44f 7384 	mov.w	r3, #264	; 0x108
 80004ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2302      	movs	r3, #2
 80004da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	4619      	mov	r1, r3
 80004e2:	481d      	ldr	r0, [pc, #116]	; (8000558 <MX_GPIO_Init+0x160>)
 80004e4:	f001 fcbe 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = RDY0_Pin|RDY1_Pin|RDY2_Pin|RDY3_Pin
 80004e8:	f640 4307 	movw	r3, #3079	; 0xc07
 80004ec:	613b      	str	r3, [r7, #16]
                          |RDY4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	4818      	ldr	r0, [pc, #96]	; (8000560 <MX_GPIO_Init+0x168>)
 80004fe:	f001 fcb1 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000502:	f44f 539e 	mov.w	r3, #5056	; 0x13c0
 8000506:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000508:	2303      	movs	r3, #3
 800050a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4813      	ldr	r0, [pc, #76]	; (8000560 <MX_GPIO_Init+0x168>)
 8000514:	f001 fca6 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS0_Pin|CS1_Pin|CS2_Pin|CS3_Pin;
 8000518:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800051c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051e:	2301      	movs	r3, #1
 8000520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000522:	2301      	movs	r3, #1
 8000524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000526:	2302      	movs	r3, #2
 8000528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	4619      	mov	r1, r3
 8000530:	480a      	ldr	r0, [pc, #40]	; (800055c <MX_GPIO_Init+0x164>)
 8000532:	f001 fc97 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000536:	2304      	movs	r3, #4
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800053a:	2303      	movs	r3, #3
 800053c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	4807      	ldr	r0, [pc, #28]	; (8000564 <MX_GPIO_Init+0x16c>)
 8000546:	f001 fc8d 	bl	8001e64 <HAL_GPIO_Init>

}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	40010800 	.word	0x40010800
 800055c:	40011000 	.word	0x40011000
 8000560:	40010c00 	.word	0x40010c00
 8000564:	40011400 	.word	0x40011400

08000568 <copy_buffer>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

static inline void copy_buffer(uint8_t dest_buffer[], uint8_t dest_size, uint8_t src_buffer[], uint8_t src_size) {
 8000568:	b480      	push	{r7}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	607a      	str	r2, [r7, #4]
 8000572:	461a      	mov	r2, r3
 8000574:	460b      	mov	r3, r1
 8000576:	72fb      	strb	r3, [r7, #11]
 8000578:	4613      	mov	r3, r2
 800057a:	72bb      	strb	r3, [r7, #10]
  for (uint8_t idx = 0; idx < src_size; idx++) {
 800057c:	2300      	movs	r3, #0
 800057e:	75fb      	strb	r3, [r7, #23]
 8000580:	e00a      	b.n	8000598 <copy_buffer+0x30>
    dest_buffer[idx] = src_buffer[idx];
 8000582:	7dfb      	ldrb	r3, [r7, #23]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	441a      	add	r2, r3
 8000588:	7dfb      	ldrb	r3, [r7, #23]
 800058a:	68f9      	ldr	r1, [r7, #12]
 800058c:	440b      	add	r3, r1
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	701a      	strb	r2, [r3, #0]
  for (uint8_t idx = 0; idx < src_size; idx++) {
 8000592:	7dfb      	ldrb	r3, [r7, #23]
 8000594:	3301      	adds	r3, #1
 8000596:	75fb      	strb	r3, [r7, #23]
 8000598:	7dfa      	ldrb	r2, [r7, #23]
 800059a:	7abb      	ldrb	r3, [r7, #10]
 800059c:	429a      	cmp	r2, r3
 800059e:	d3f0      	bcc.n	8000582 <copy_buffer+0x1a>
  }
}
 80005a0:	bf00      	nop
 80005a2:	371c      	adds	r7, #28
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
	...

080005ac <set_state>:

static inline void set_state(uint8_t command_idx) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
  switch (command_idx) {
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	3bfa      	subs	r3, #250	; 0xfa
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	d81a      	bhi.n	80005f4 <set_state+0x48>
 80005be:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <set_state+0x18>)
 80005c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c4:	080005ed 	.word	0x080005ed
 80005c8:	080005e5 	.word	0x080005e5
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	080005d5 	.word	0x080005d5
    case 0xFD: //11111101, 253
      slave_state = MONITOR;
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <set_state+0x58>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
      break;
 80005da:	e00e      	b.n	80005fa <set_state+0x4e>

    case 0xFC: //11111100, 252
      slave_state = PROVIDE_DATA;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <set_state+0x58>)
 80005de:	2203      	movs	r2, #3
 80005e0:	701a      	strb	r2, [r3, #0]
      break;
 80005e2:	e00a      	b.n	80005fa <set_state+0x4e>

    case 0xFB: //11111011, 251
      slave_state = CHECKING_SPI2;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <set_state+0x58>)
 80005e6:	2204      	movs	r2, #4
 80005e8:	701a      	strb	r2, [r3, #0]
      break;
 80005ea:	e006      	b.n	80005fa <set_state+0x4e>

    case 0xFA: //11111010, 250
      slave_state = SETTING;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <set_state+0x58>)
 80005ee:	2205      	movs	r2, #5
 80005f0:	701a      	strb	r2, [r3, #0]
      break;
 80005f2:	e002      	b.n	80005fa <set_state+0x4e>

    default:
      slave_state = READ_CONFIG;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <set_state+0x58>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	701a      	strb	r2, [r3, #0]
  }
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	20000040 	.word	0x20000040

08000608 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  if (hspi->Instance == SPI3) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a26      	ldr	r2, [pc, #152]	; (80006b0 <HAL_SPI_TxRxCpltCallback+0xa8>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d145      	bne.n	80006a6 <HAL_SPI_TxRxCpltCallback+0x9e>
    switch (active_buffer) {
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <HAL_SPI_TxRxCpltCallback+0xac>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <HAL_SPI_TxRxCpltCallback+0x20>
 8000622:	2b01      	cmp	r3, #1
 8000624:	d00f      	beq.n	8000646 <HAL_SPI_TxRxCpltCallback+0x3e>
 8000626:	e01d      	b.n	8000664 <HAL_SPI_TxRxCpltCallback+0x5c>
      case 0:
        shadow_buffer_3_1[63] = slave_state; //3_1
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 800062a:	781a      	ldrb	r2, [r3, #0]
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <HAL_SPI_TxRxCpltCallback+0xb4>)
 800062e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        HAL_SPI_TransmitReceive_DMA(&hspi3, shadow_buffer_3_1, rx_buffer_3, BUFFER_SIZE_SPI3);
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8000636:	4921      	ldr	r1, [pc, #132]	; (80006bc <HAL_SPI_TxRxCpltCallback+0xb4>)
 8000638:	4822      	ldr	r0, [pc, #136]	; (80006c4 <HAL_SPI_TxRxCpltCallback+0xbc>)
 800063a:	f002 fdf1 	bl	8003220 <HAL_SPI_TransmitReceive_DMA>
//        HAL_SPI_TransmitReceive_DMA(&hspi3, shadow_buffer_3_2, rx_buffer_3, BUFFER_SIZE_SPI3);
        buffer_updated = 1;
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <HAL_SPI_TxRxCpltCallback+0xc0>)
 8000640:	2201      	movs	r2, #1
 8000642:	701a      	strb	r2, [r3, #0]
        break;
 8000644:	e00e      	b.n	8000664 <HAL_SPI_TxRxCpltCallback+0x5c>

      case 1:
        shadow_buffer_3_0[63] = slave_state; //3_0
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <HAL_SPI_TxRxCpltCallback+0xb0>)
 8000648:	781a      	ldrb	r2, [r3, #0]
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <HAL_SPI_TxRxCpltCallback+0xc4>)
 800064c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        HAL_SPI_TransmitReceive_DMA(&hspi3, shadow_buffer_3_0, rx_buffer_3, BUFFER_SIZE_SPI3);
 8000650:	2340      	movs	r3, #64	; 0x40
 8000652:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8000654:	491d      	ldr	r1, [pc, #116]	; (80006cc <HAL_SPI_TxRxCpltCallback+0xc4>)
 8000656:	481b      	ldr	r0, [pc, #108]	; (80006c4 <HAL_SPI_TxRxCpltCallback+0xbc>)
 8000658:	f002 fde2 	bl	8003220 <HAL_SPI_TransmitReceive_DMA>
//        HAL_SPI_TransmitReceive_DMA(&hspi3, shadow_buffer_3_2, rx_buffer_3, BUFFER_SIZE_SPI3);
        buffer_updated = 1;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <HAL_SPI_TxRxCpltCallback+0xc0>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]
        break;
 8000662:	bf00      	nop
    }

    set_state(rx_buffer_3[0]);
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff9f 	bl	80005ac <set_state>
    if (rx_buffer_3[1] != 0)
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d007      	beq.n	8000686 <HAL_SPI_TxRxCpltCallback+0x7e>
    {
    	mode_register[0] = rx_buffer_3[2];
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8000678:	789a      	ldrb	r2, [r3, #2]
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_SPI_TxRxCpltCallback+0xc8>)
 800067c:	701a      	strb	r2, [r3, #0]
    	mode_register[1] = rx_buffer_3[3];
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8000680:	78da      	ldrb	r2, [r3, #3]
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <HAL_SPI_TxRxCpltCallback+0xc8>)
 8000684:	705a      	strb	r2, [r3, #1]
    }
    if (rx_buffer_3[4] != 0)
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00b      	beq.n	80006a6 <HAL_SPI_TxRxCpltCallback+0x9e>
    {
    	filter_register[0] = rx_buffer_3[5];
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8000690:	795a      	ldrb	r2, [r3, #5]
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <HAL_SPI_TxRxCpltCallback+0xcc>)
 8000694:	701a      	strb	r2, [r3, #0]
    	filter_register[1] = rx_buffer_3[6];
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 8000698:	799a      	ldrb	r2, [r3, #6]
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <HAL_SPI_TxRxCpltCallback+0xcc>)
 800069c:	705a      	strb	r2, [r3, #1]
    	filter_register[2] = rx_buffer_3[7];
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_SPI_TxRxCpltCallback+0xb8>)
 80006a0:	79da      	ldrb	r2, [r3, #7]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_SPI_TxRxCpltCallback+0xcc>)
 80006a4:	709a      	strb	r2, [r3, #2]
    }
  }

}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40003c00 	.word	0x40003c00
 80006b4:	200000cc 	.word	0x200000cc
 80006b8:	20000040 	.word	0x20000040
 80006bc:	200000d0 	.word	0x200000d0
 80006c0:	20000000 	.word	0x20000000
 80006c4:	200001f0 	.word	0x200001f0
 80006c8:	200000cd 	.word	0x200000cd
 80006cc:	20000114 	.word	0x20000114
 80006d0:	2000004c 	.word	0x2000004c
 80006d4:	20000050 	.word	0x20000050

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fe09 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 fb69 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f7ff fe87 	bl	80003f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ea:	f7ff fe5f 	bl	80003ac <MX_DMA_Init>
  MX_SPI2_Init();
 80006ee:	f000 fbad 	bl	8000e4c <MX_SPI2_Init>
  MX_SPI3_Init();
 80006f2:	f000 fbe1 	bl	8000eb8 <MX_SPI3_Init>
//  HAL_GPIO_WritePin(RESET1_GPIO_Port, RESET1_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(RESET2_GPIO_Port, RESET2_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(CS0_GPIO_Port, CS0_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_SET);
  for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80006fc:	e00a      	b.n	8000714 <main+0x3c>
	  ad7730_softreset(dev_idx, slave_infos);
 80006fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000702:	49c9      	ldr	r1, [pc, #804]	; (8000a28 <main+0x350>)
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fd8d 	bl	8000224 <ad7730_softreset>
  for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++)
 800070a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800070e:	3301      	adds	r3, #1
 8000710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000718:	2b02      	cmp	r3, #2
 800071a:	d9f0      	bls.n	80006fe <main+0x26>
  HAL_SPI_TransmitReceive_DMA(&hspi3, tx_buffer_3, rx_buffer_3, BUFFER_SIZE_SPI3);
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	4ac3      	ldr	r2, [pc, #780]	; (8000a2c <main+0x354>)
 8000720:	49c3      	ldr	r1, [pc, #780]	; (8000a30 <main+0x358>)
 8000722:	48c4      	ldr	r0, [pc, #784]	; (8000a34 <main+0x35c>)
 8000724:	f002 fd7c 	bl	8003220 <HAL_SPI_TransmitReceive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch (slave_state) {
 8000728:	4bc3      	ldr	r3, [pc, #780]	; (8000a38 <main+0x360>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	3b01      	subs	r3, #1
 800072e:	2b04      	cmp	r3, #4
 8000730:	d8fa      	bhi.n	8000728 <main+0x50>
 8000732:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <main+0x60>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	08000c95 	.word	0x08000c95
 800073c:	0800074d 	.word	0x0800074d
 8000740:	08000c55 	.word	0x08000c55
 8000744:	08000839 	.word	0x08000839
 8000748:	08000a13 	.word	0x08000a13

	       case READ_CONFIG:
	    	   copy_buffer(tx_buffer_3, BUFFER_SIZE_SPI3, rx_buffer_3, BUFFER_SIZE_SPI3);
 800074c:	2340      	movs	r3, #64	; 0x40
 800074e:	4ab7      	ldr	r2, [pc, #732]	; (8000a2c <main+0x354>)
 8000750:	2140      	movs	r1, #64	; 0x40
 8000752:	48b7      	ldr	r0, [pc, #732]	; (8000a30 <main+0x358>)
 8000754:	f7ff ff08 	bl	8000568 <copy_buffer>
	    	   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000758:	2300      	movs	r3, #0
 800075a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800075e:	e010      	b.n	8000782 <main+0xaa>
				   ad7730_read_register(dev_idx, REG_FILTER_REGISTER, &tx_buffer_3[dev_idx * CONFIGDATA_SIZE+8], slave_infos);
 8000760:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8000764:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000768:	3301      	adds	r3, #1
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	4ab0      	ldr	r2, [pc, #704]	; (8000a30 <main+0x358>)
 800076e:	441a      	add	r2, r3
 8000770:	4bad      	ldr	r3, [pc, #692]	; (8000a28 <main+0x350>)
 8000772:	2103      	movs	r1, #3
 8000774:	f7ff fda6 	bl	80002c4 <ad7730_read_register>
	    	   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000778:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800077c:	3301      	adds	r3, #1
 800077e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000782:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000786:	2b02      	cmp	r3, #2
 8000788:	d9ea      	bls.n	8000760 <main+0x88>
			   }
	    	   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 800078a:	2300      	movs	r3, #0
 800078c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000790:	e010      	b.n	80007b4 <main+0xdc>
	    		   ad7730_read_register(dev_idx, REG_DAC_REGISTER, &tx_buffer_3[dev_idx*CONFIGDATA_SIZE + 11], slave_infos);
 8000792:	f897 002d 	ldrb.w	r0, [r7, #45]	; 0x2d
 8000796:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	330b      	adds	r3, #11
 800079e:	4aa4      	ldr	r2, [pc, #656]	; (8000a30 <main+0x358>)
 80007a0:	441a      	add	r2, r3
 80007a2:	4ba1      	ldr	r3, [pc, #644]	; (8000a28 <main+0x350>)
 80007a4:	2104      	movs	r1, #4
 80007a6:	f7ff fd8d 	bl	80002c4 <ad7730_read_register>
	    	   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 80007aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007ae:	3301      	adds	r3, #1
 80007b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80007b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d9ea      	bls.n	8000792 <main+0xba>
			   }
	    	   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80007c2:	e010      	b.n	80007e6 <main+0x10e>
	    		   ad7730_read_register(dev_idx, REG_MODE_REGISTER, &tx_buffer_3[dev_idx*CONFIGDATA_SIZE + 12], slave_infos);
 80007c4:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 80007c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	330c      	adds	r3, #12
 80007d0:	4a97      	ldr	r2, [pc, #604]	; (8000a30 <main+0x358>)
 80007d2:	441a      	add	r2, r3
 80007d4:	4b94      	ldr	r3, [pc, #592]	; (8000a28 <main+0x350>)
 80007d6:	2102      	movs	r1, #2
 80007d8:	f7ff fd74 	bl	80002c4 <ad7730_read_register>
	    	   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 80007dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007e0:	3301      	adds	r3, #1
 80007e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80007e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d9ea      	bls.n	80007c4 <main+0xec>
			   }
	    	   if (buffer_updated == 1) {
 80007ee:	4b93      	ldr	r3, [pc, #588]	; (8000a3c <main+0x364>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	f040 82d0 	bne.w	8000d98 <main+0x6c0>
	    		   switch (active_buffer) {
 80007f8:	4b91      	ldr	r3, [pc, #580]	; (8000a40 <main+0x368>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d002      	beq.n	8000806 <main+0x12e>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d007      	beq.n	8000814 <main+0x13c>
 8000804:	e00d      	b.n	8000822 <main+0x14a>
					 case 0:
					   copy_buffer(shadow_buffer_3_0, BUFFER_SIZE_SPI3, tx_buffer_3, BUFFER_SIZE_SPI3);
 8000806:	2340      	movs	r3, #64	; 0x40
 8000808:	4a89      	ldr	r2, [pc, #548]	; (8000a30 <main+0x358>)
 800080a:	2140      	movs	r1, #64	; 0x40
 800080c:	488d      	ldr	r0, [pc, #564]	; (8000a44 <main+0x36c>)
 800080e:	f7ff feab 	bl	8000568 <copy_buffer>
					   break;
 8000812:	e006      	b.n	8000822 <main+0x14a>

					 case 1:
					   copy_buffer(shadow_buffer_3_1, BUFFER_SIZE_SPI3, tx_buffer_3, BUFFER_SIZE_SPI3);
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	4a86      	ldr	r2, [pc, #536]	; (8000a30 <main+0x358>)
 8000818:	2140      	movs	r1, #64	; 0x40
 800081a:	488b      	ldr	r0, [pc, #556]	; (8000a48 <main+0x370>)
 800081c:	f7ff fea4 	bl	8000568 <copy_buffer>
					   break;
 8000820:	bf00      	nop
				   }
				   active_buffer ^= 1;
 8000822:	4b87      	ldr	r3, [pc, #540]	; (8000a40 <main+0x368>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	f083 0301 	eor.w	r3, r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b84      	ldr	r3, [pc, #528]	; (8000a40 <main+0x368>)
 800082e:	701a      	strb	r2, [r3, #0]
				   buffer_updated = 0;
 8000830:	4b82      	ldr	r3, [pc, #520]	; (8000a3c <main+0x364>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
	    	   }
	    	   break;
 8000836:	e2af      	b.n	8000d98 <main+0x6c0>

	       case CHECKING_SPI2:

	       	   copy_buffer(tx_buffer_3, BUFFER_SIZE_SPI3, rx_buffer_3, BUFFER_SIZE_SPI3);
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	4a7c      	ldr	r2, [pc, #496]	; (8000a2c <main+0x354>)
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	487c      	ldr	r0, [pc, #496]	; (8000a30 <main+0x358>)
 8000840:	f7ff fe92 	bl	8000568 <copy_buffer>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000844:	2300      	movs	r3, #0
 8000846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800084a:	e00b      	b.n	8000864 <main+0x18c>
				   ad7730_write_register(dev_idx, REG_FILTER_REGISTER, filter_register, slave_infos);
 800084c:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 8000850:	4b75      	ldr	r3, [pc, #468]	; (8000a28 <main+0x350>)
 8000852:	4a7e      	ldr	r2, [pc, #504]	; (8000a4c <main+0x374>)
 8000854:	2103      	movs	r1, #3
 8000856:	f7ff fd6f 	bl	8000338 <ad7730_write_register>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 800085a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800085e:	3301      	adds	r3, #1
 8000860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000864:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000868:	2b02      	cmp	r3, #2
 800086a:	d9ef      	bls.n	800084c <main+0x174>
			   }
//			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
//				   ad7730_read_register(dev_idx, REG_IO_REGISTER, &tx_buffer_3[dev_idx + 8], slave_infos);
//			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 800086c:	2300      	movs	r3, #0
 800086e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000872:	e010      	b.n	8000896 <main+0x1be>
				   ad7730_read_register(dev_idx, REG_FILTER_REGISTER, &tx_buffer_3[dev_idx * CONFIGDATA_SIZE+8], slave_infos);
 8000874:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8000878:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800087c:	3301      	adds	r3, #1
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4a6b      	ldr	r2, [pc, #428]	; (8000a30 <main+0x358>)
 8000882:	441a      	add	r2, r3
 8000884:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <main+0x350>)
 8000886:	2103      	movs	r1, #3
 8000888:	f7ff fd1c 	bl	80002c4 <ad7730_read_register>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 800088c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000890:	3301      	adds	r3, #1
 8000892:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000896:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800089a:	2b02      	cmp	r3, #2
 800089c:	d9ea      	bls.n	8000874 <main+0x19c>
			   }
//			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {//setting a offset voltage between AIN+ and AIN-
//				 uint8_t DAC_command = 0x00 | 0x00; //+ | 20mV
//				 ad7730_write_register(dev_idx, REG_DAC_REGISTER, DAC_command, slave_infos);
//			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80008a4:	e010      	b.n	80008c8 <main+0x1f0>
				 ad7730_read_register(dev_idx, REG_DAC_REGISTER, &tx_buffer_3[dev_idx*CONFIGDATA_SIZE + 11], slave_infos);
 80008a6:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 80008aa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	330b      	adds	r3, #11
 80008b2:	4a5f      	ldr	r2, [pc, #380]	; (8000a30 <main+0x358>)
 80008b4:	441a      	add	r2, r3
 80008b6:	4b5c      	ldr	r3, [pc, #368]	; (8000a28 <main+0x350>)
 80008b8:	2104      	movs	r1, #4
 80008ba:	f7ff fd03 	bl	80002c4 <ad7730_read_register>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 80008be:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80008c2:	3301      	adds	r3, #1
 80008c4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80008c8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d9ea      	bls.n	80008a6 <main+0x1ce>
//			   }
//			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) { //internal full calibration
//				 uint8_t conversion_command[2] = {0xB1, 0x80 | CHANNEL_A1};
//				 ad7730_write_register(dev_idx, REG_MODE_REGISTER, conversion_command, slave_infos);
//			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80008d6:	e012      	b.n	80008fe <main+0x226>
				 uint8_t conversion_command[2] = {mode_register[0], mode_register[1] | CHANNEL_A1};
 80008d8:	4b5d      	ldr	r3, [pc, #372]	; (8000a50 <main+0x378>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	753b      	strb	r3, [r7, #20]
 80008de:	4b5c      	ldr	r3, [pc, #368]	; (8000a50 <main+0x378>)
 80008e0:	785b      	ldrb	r3, [r3, #1]
 80008e2:	757b      	strb	r3, [r7, #21]
				 ad7730_write_register(dev_idx, REG_MODE_REGISTER, conversion_command, slave_infos);
 80008e4:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 80008e8:	f107 0214 	add.w	r2, r7, #20
 80008ec:	4b4e      	ldr	r3, [pc, #312]	; (8000a28 <main+0x350>)
 80008ee:	2102      	movs	r1, #2
 80008f0:	f7ff fd22 	bl	8000338 <ad7730_write_register>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 80008f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008f8:	3301      	adds	r3, #1
 80008fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80008fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000902:	2b02      	cmp	r3, #2
 8000904:	d9e8      	bls.n	80008d8 <main+0x200>
			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000906:	2300      	movs	r3, #0
 8000908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800090c:	e010      	b.n	8000930 <main+0x258>
				 ad7730_read_register(dev_idx, REG_MODE_REGISTER, &tx_buffer_3[dev_idx*CONFIGDATA_SIZE + 12], slave_infos);
 800090e:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8000912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	330c      	adds	r3, #12
 800091a:	4a45      	ldr	r2, [pc, #276]	; (8000a30 <main+0x358>)
 800091c:	441a      	add	r2, r3
 800091e:	4b42      	ldr	r3, [pc, #264]	; (8000a28 <main+0x350>)
 8000920:	2102      	movs	r1, #2
 8000922:	f7ff fccf 	bl	80002c4 <ad7730_read_register>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800092a:	3301      	adds	r3, #1
 800092c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000934:	2b02      	cmp	r3, #2
 8000936:	d9ea      	bls.n	800090e <main+0x236>
			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800093e:	e012      	b.n	8000966 <main+0x28e>
				 uint8_t conversion_command[2] = {mode_register[0], mode_register[1] | CHANNEL_A1};
 8000940:	4b43      	ldr	r3, [pc, #268]	; (8000a50 <main+0x378>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	743b      	strb	r3, [r7, #16]
 8000946:	4b42      	ldr	r3, [pc, #264]	; (8000a50 <main+0x378>)
 8000948:	785b      	ldrb	r3, [r3, #1]
 800094a:	747b      	strb	r3, [r7, #17]
				 ad7730_write_register(dev_idx, REG_MODE_REGISTER, conversion_command, slave_infos);
 800094c:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8000950:	f107 0210 	add.w	r2, r7, #16
 8000954:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <main+0x350>)
 8000956:	2102      	movs	r1, #2
 8000958:	f7ff fcee 	bl	8000338 <ad7730_write_register>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 800095c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000960:	3301      	adds	r3, #1
 8000962:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800096a:	2b02      	cmp	r3, #2
 800096c:	d9e8      	bls.n	8000940 <main+0x268>
			   }
			   //wait for ready
		       for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 800096e:	2300      	movs	r3, #0
 8000970:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000974:	e024      	b.n	80009c0 <main+0x2e8>
		         while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
		          uint8_t dbg = dev_idx;
 8000976:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800097a:	763b      	strb	r3, [r7, #24]
		         while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
 800097c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000980:	4a34      	ldr	r2, [pc, #208]	; (8000a54 <main+0x37c>)
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	4413      	add	r3, r2
 8000986:	6858      	ldr	r0, [r3, #4]
 8000988:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800098c:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <main+0x37c>)
 800098e:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000992:	4619      	mov	r1, r3
 8000994:	f001 fbd0 	bl	8002138 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d0eb      	beq.n	8000976 <main+0x29e>
		         }
		         ad7730_read_register(dev_idx, REG_DATA_REGISTER, &tx_buffer_3[dev_idx * CONFIGDATA_SIZE + 16], slave_infos);
 800099e:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80009a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009a6:	3302      	adds	r3, #2
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <main+0x358>)
 80009ac:	441a      	add	r2, r3
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <main+0x350>)
 80009b0:	2101      	movs	r1, #1
 80009b2:	f7ff fc87 	bl	80002c4 <ad7730_read_register>
		       for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 80009b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009ba:	3301      	adds	r3, #1
 80009bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80009c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d9d9      	bls.n	800097c <main+0x2a4>
		       }
	       	//TODO Make do while loop
			  if (buffer_updated == 1) {
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <main+0x364>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	f040 81e5 	bne.w	8000d9c <main+0x6c4>
	           switch (active_buffer) {
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <main+0x368>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <main+0x308>
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d007      	beq.n	80009ee <main+0x316>
 80009de:	e00d      	b.n	80009fc <main+0x324>
	             case 0:
	               copy_buffer(shadow_buffer_3_0, BUFFER_SIZE_SPI3, tx_buffer_3, BUFFER_SIZE_SPI3);
 80009e0:	2340      	movs	r3, #64	; 0x40
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <main+0x358>)
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	4817      	ldr	r0, [pc, #92]	; (8000a44 <main+0x36c>)
 80009e8:	f7ff fdbe 	bl	8000568 <copy_buffer>
	               break;
 80009ec:	e006      	b.n	80009fc <main+0x324>

	             case 1:
	               copy_buffer(shadow_buffer_3_1, BUFFER_SIZE_SPI3, tx_buffer_3, BUFFER_SIZE_SPI3);
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <main+0x358>)
 80009f2:	2140      	movs	r1, #64	; 0x40
 80009f4:	4814      	ldr	r0, [pc, #80]	; (8000a48 <main+0x370>)
 80009f6:	f7ff fdb7 	bl	8000568 <copy_buffer>
	               break;
 80009fa:	bf00      	nop
	           }
			   active_buffer ^= 1;
 80009fc:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <main+0x368>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	f083 0301 	eor.w	r3, r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <main+0x368>)
 8000a08:	701a      	strb	r2, [r3, #0]
			   buffer_updated = 0;
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <main+0x364>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
			 }
			 break;
 8000a10:	e1c4      	b.n	8000d9c <main+0x6c4>

	       case SETTING:
	    	   copy_buffer(tx_buffer_3, BUFFER_SIZE_SPI3, rx_buffer_3, BUFFER_SIZE_SPI3);
 8000a12:	2340      	movs	r3, #64	; 0x40
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <main+0x354>)
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <main+0x358>)
 8000a1a:	f7ff fda5 	bl	8000568 <copy_buffer>

			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000a24:	e024      	b.n	8000a70 <main+0x398>
 8000a26:	bf00      	nop
 8000a28:	20000054 	.word	0x20000054
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000158 	.word	0x20000158
 8000a34:	200001f0 	.word	0x200001f0
 8000a38:	20000040 	.word	0x20000040
 8000a3c:	200000cd 	.word	0x200000cd
 8000a40:	200000cc 	.word	0x200000cc
 8000a44:	20000114 	.word	0x20000114
 8000a48:	200000d0 	.word	0x200000d0
 8000a4c:	20000050 	.word	0x20000050
 8000a50:	2000004c 	.word	0x2000004c
 8000a54:	2000007c 	.word	0x2000007c
				   ad7730_write_register(dev_idx, REG_FILTER_REGISTER, filter_register, slave_infos);
 8000a58:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000a5c:	4bba      	ldr	r3, [pc, #744]	; (8000d48 <main+0x670>)
 8000a5e:	4abb      	ldr	r2, [pc, #748]	; (8000d4c <main+0x674>)
 8000a60:	2103      	movs	r1, #3
 8000a62:	f7ff fc69 	bl	8000338 <ad7730_write_register>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000a66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000a70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d9ef      	bls.n	8000a58 <main+0x380>
			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000a7e:	e00f      	b.n	8000aa0 <main+0x3c8>
				   ad7730_read_register(dev_idx, REG_FILTER_REGISTER, &tx_buffer_3[dev_idx * CONFIGDATA_SIZE], slave_infos);
 8000a80:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
 8000a84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	4ab1      	ldr	r2, [pc, #708]	; (8000d50 <main+0x678>)
 8000a8c:	441a      	add	r2, r3
 8000a8e:	4bae      	ldr	r3, [pc, #696]	; (8000d48 <main+0x670>)
 8000a90:	2103      	movs	r1, #3
 8000a92:	f7ff fc17 	bl	80002c4 <ad7730_read_register>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d9eb      	bls.n	8000a80 <main+0x3a8>
			   }
//			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {//setting a offset voltage between AIN+ and AIN-
//			     uint8_t DAC_command = 0x20 | 0x08; //- | 20mV
//				 ad7730_write_register(dev_idx, REG_DAC_REGISTER, DAC_command, slave_infos);
//			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000aae:	e010      	b.n	8000ad2 <main+0x3fa>
				 ad7730_read_register(dev_idx, REG_DAC_REGISTER, &tx_buffer_3[dev_idx*CONFIGDATA_SIZE + 3], slave_infos);
 8000ab0:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8000ab4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	3303      	adds	r3, #3
 8000abc:	4aa4      	ldr	r2, [pc, #656]	; (8000d50 <main+0x678>)
 8000abe:	441a      	add	r2, r3
 8000ac0:	4ba1      	ldr	r3, [pc, #644]	; (8000d48 <main+0x670>)
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	f7ff fbfe 	bl	80002c4 <ad7730_read_register>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000ac8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000acc:	3301      	adds	r3, #1
 8000ace:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000ad2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d9ea      	bls.n	8000ab0 <main+0x3d8>
			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000ada:	2300      	movs	r3, #0
 8000adc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000ae0:	e026      	b.n	8000b30 <main+0x458>
				 uint8_t conversion_command[2] = {0x81, mode_register[1] | CHANNEL_A1}; //Internal Zero Calibaration
 8000ae2:	2381      	movs	r3, #129	; 0x81
 8000ae4:	733b      	strb	r3, [r7, #12]
 8000ae6:	4b9b      	ldr	r3, [pc, #620]	; (8000d54 <main+0x67c>)
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	737b      	strb	r3, [r7, #13]
				 ad7730_write_register(dev_idx, REG_MODE_REGISTER, conversion_command, slave_infos);
 8000aec:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
 8000af0:	f107 020c 	add.w	r2, r7, #12
 8000af4:	4b94      	ldr	r3, [pc, #592]	; (8000d48 <main+0x670>)
 8000af6:	2102      	movs	r1, #2
 8000af8:	f7ff fc1e 	bl	8000338 <ad7730_write_register>
				 while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
 8000afc:	e002      	b.n	8000b04 <main+0x42c>
				   uint8_t dbg = dev_idx;
 8000afe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000b02:	767b      	strb	r3, [r7, #25]
				 while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
 8000b04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000b08:	4a93      	ldr	r2, [pc, #588]	; (8000d58 <main+0x680>)
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	4413      	add	r3, r2
 8000b0e:	6858      	ldr	r0, [r3, #4]
 8000b10:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000b14:	4a90      	ldr	r2, [pc, #576]	; (8000d58 <main+0x680>)
 8000b16:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f001 fb0c 	bl	8002138 <HAL_GPIO_ReadPin>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d0eb      	beq.n	8000afe <main+0x426>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000b26:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000b30:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d9d4      	bls.n	8000ae2 <main+0x40a>
				 }
			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f887 3020 	strb.w	r3, [r7, #32]
 8000b3e:	e026      	b.n	8000b8e <main+0x4b6>
				 uint8_t conversion_command[2] = {0xA1, mode_register[1] | CHANNEL_A1}; //Internal Full Calibaration
 8000b40:	23a1      	movs	r3, #161	; 0xa1
 8000b42:	723b      	strb	r3, [r7, #8]
 8000b44:	4b83      	ldr	r3, [pc, #524]	; (8000d54 <main+0x67c>)
 8000b46:	785b      	ldrb	r3, [r3, #1]
 8000b48:	727b      	strb	r3, [r7, #9]
				 ad7730_write_register(dev_idx, REG_MODE_REGISTER, conversion_command, slave_infos);
 8000b4a:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b4e:	f107 0208 	add.w	r2, r7, #8
 8000b52:	4b7d      	ldr	r3, [pc, #500]	; (8000d48 <main+0x670>)
 8000b54:	2102      	movs	r1, #2
 8000b56:	f7ff fbef 	bl	8000338 <ad7730_write_register>
				 while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
 8000b5a:	e002      	b.n	8000b62 <main+0x48a>
				   uint8_t dbg = dev_idx;
 8000b5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b60:	76bb      	strb	r3, [r7, #26]
				 while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
 8000b62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b66:	4a7c      	ldr	r2, [pc, #496]	; (8000d58 <main+0x680>)
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	4413      	add	r3, r2
 8000b6c:	6858      	ldr	r0, [r3, #4]
 8000b6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b72:	4a79      	ldr	r2, [pc, #484]	; (8000d58 <main+0x680>)
 8000b74:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f001 fadd 	bl	8002138 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d0eb      	beq.n	8000b5c <main+0x484>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000b84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	f887 3020 	strb.w	r3, [r7, #32]
 8000b8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d9d4      	bls.n	8000b40 <main+0x468>
				 }
			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	77fb      	strb	r3, [r7, #31]
 8000b9a:	e020      	b.n	8000bde <main+0x506>
				 uint8_t conversion_command[2] = {mode_register[0], mode_register[1] | CHANNEL_A1};
 8000b9c:	4b6d      	ldr	r3, [pc, #436]	; (8000d54 <main+0x67c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	713b      	strb	r3, [r7, #4]
 8000ba2:	4b6c      	ldr	r3, [pc, #432]	; (8000d54 <main+0x67c>)
 8000ba4:	785b      	ldrb	r3, [r3, #1]
 8000ba6:	717b      	strb	r3, [r7, #5]
				 ad7730_write_register(dev_idx, REG_MODE_REGISTER, conversion_command, slave_infos);
 8000ba8:	7ff8      	ldrb	r0, [r7, #31]
 8000baa:	1d3a      	adds	r2, r7, #4
 8000bac:	4b66      	ldr	r3, [pc, #408]	; (8000d48 <main+0x670>)
 8000bae:	2102      	movs	r1, #2
 8000bb0:	f7ff fbc2 	bl	8000338 <ad7730_write_register>
				 while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
 8000bb4:	e001      	b.n	8000bba <main+0x4e2>
				   uint8_t dbg = dev_idx;
 8000bb6:	7ffb      	ldrb	r3, [r7, #31]
 8000bb8:	76fb      	strb	r3, [r7, #27]
				 while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
 8000bba:	7ffb      	ldrb	r3, [r7, #31]
 8000bbc:	4a66      	ldr	r2, [pc, #408]	; (8000d58 <main+0x680>)
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	6858      	ldr	r0, [r3, #4]
 8000bc4:	7ffb      	ldrb	r3, [r7, #31]
 8000bc6:	4a64      	ldr	r2, [pc, #400]	; (8000d58 <main+0x680>)
 8000bc8:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f001 fab3 	bl	8002138 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d0ee      	beq.n	8000bb6 <main+0x4de>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000bd8:	7ffb      	ldrb	r3, [r7, #31]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	77fb      	strb	r3, [r7, #31]
 8000bde:	7ffb      	ldrb	r3, [r7, #31]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	d9db      	bls.n	8000b9c <main+0x4c4>
				 }
			   }
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	77bb      	strb	r3, [r7, #30]
 8000be8:	e00c      	b.n	8000c04 <main+0x52c>
				 ad7730_read_register(dev_idx, REG_MODE_REGISTER, &tx_buffer_3[dev_idx*CONFIGDATA_SIZE + 6], slave_infos);
 8000bea:	7fb8      	ldrb	r0, [r7, #30]
 8000bec:	7fbb      	ldrb	r3, [r7, #30]
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	3306      	adds	r3, #6
 8000bf2:	4a57      	ldr	r2, [pc, #348]	; (8000d50 <main+0x678>)
 8000bf4:	441a      	add	r2, r3
 8000bf6:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <main+0x670>)
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	f7ff fb63 	bl	80002c4 <ad7730_read_register>
			   for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000bfe:	7fbb      	ldrb	r3, [r7, #30]
 8000c00:	3301      	adds	r3, #1
 8000c02:	77bb      	strb	r3, [r7, #30]
 8000c04:	7fbb      	ldrb	r3, [r7, #30]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d9ef      	bls.n	8000bea <main+0x512>
//				 while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
//				   uint8_t dbg = dev_idx;
//				 }
//			   }

			   if (buffer_updated == 1) {
 8000c0a:	4b54      	ldr	r3, [pc, #336]	; (8000d5c <main+0x684>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	f040 80c6 	bne.w	8000da0 <main+0x6c8>
				   switch (active_buffer) {
 8000c14:	4b52      	ldr	r3, [pc, #328]	; (8000d60 <main+0x688>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <main+0x54a>
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d007      	beq.n	8000c30 <main+0x558>
 8000c20:	e00d      	b.n	8000c3e <main+0x566>
				   	   case 0:
					   	   copy_buffer(shadow_buffer_3_0, BUFFER_SIZE_SPI3, tx_buffer_3, BUFFER_SIZE_SPI3);
 8000c22:	2340      	movs	r3, #64	; 0x40
 8000c24:	4a4a      	ldr	r2, [pc, #296]	; (8000d50 <main+0x678>)
 8000c26:	2140      	movs	r1, #64	; 0x40
 8000c28:	484e      	ldr	r0, [pc, #312]	; (8000d64 <main+0x68c>)
 8000c2a:	f7ff fc9d 	bl	8000568 <copy_buffer>
					   	   break;
 8000c2e:	e006      	b.n	8000c3e <main+0x566>

				   	   case 1:
				   		   copy_buffer(shadow_buffer_3_1, BUFFER_SIZE_SPI3, tx_buffer_3, BUFFER_SIZE_SPI3);
 8000c30:	2340      	movs	r3, #64	; 0x40
 8000c32:	4a47      	ldr	r2, [pc, #284]	; (8000d50 <main+0x678>)
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	484c      	ldr	r0, [pc, #304]	; (8000d68 <main+0x690>)
 8000c38:	f7ff fc96 	bl	8000568 <copy_buffer>
				   		   break;
 8000c3c:	bf00      	nop
				   }
				   active_buffer ^= 1;
 8000c3e:	4b48      	ldr	r3, [pc, #288]	; (8000d60 <main+0x688>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <main+0x688>)
 8000c4a:	701a      	strb	r2, [r3, #0]
				   buffer_updated = 0;
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <main+0x684>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
			   }
			   break;
 8000c52:	e0a5      	b.n	8000da0 <main+0x6c8>
////	           while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
////	         	  //uint8_t dbg = dev_idx;
////	           }
//			   ad7730_read_register(dev_idx, REG_DATA_REGISTER, &tx_buffer_3[dev_idx * 6], slave_infos);
//			 }
	           switch (active_buffer) {
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <main+0x688>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <main+0x58a>
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d007      	beq.n	8000c70 <main+0x598>
 8000c60:	e00d      	b.n	8000c7e <main+0x5a6>
	             case 0:
	               copy_buffer(shadow_buffer_3_0, BUFFER_SIZE_SPI3, tx_buffer_3, BUFFER_SIZE_SPI3);
 8000c62:	2340      	movs	r3, #64	; 0x40
 8000c64:	4a3a      	ldr	r2, [pc, #232]	; (8000d50 <main+0x678>)
 8000c66:	2140      	movs	r1, #64	; 0x40
 8000c68:	483e      	ldr	r0, [pc, #248]	; (8000d64 <main+0x68c>)
 8000c6a:	f7ff fc7d 	bl	8000568 <copy_buffer>
	               break;
 8000c6e:	e006      	b.n	8000c7e <main+0x5a6>

	             case 1:
	               copy_buffer(shadow_buffer_3_1, BUFFER_SIZE_SPI3, tx_buffer_3, BUFFER_SIZE_SPI3);
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	4a37      	ldr	r2, [pc, #220]	; (8000d50 <main+0x678>)
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	483c      	ldr	r0, [pc, #240]	; (8000d68 <main+0x690>)
 8000c78:	f7ff fc76 	bl	8000568 <copy_buffer>
	               break;
 8000c7c:	bf00      	nop
	           }
			   active_buffer ^= 1;
 8000c7e:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <main+0x688>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	f083 0301 	eor.w	r3, r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <main+0x688>)
 8000c8a:	701a      	strb	r2, [r3, #0]
			   buffer_updated = 0;
 8000c8c:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <main+0x684>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
	         break;
 8000c92:	e088      	b.n	8000da6 <main+0x6ce>
	          * Doing so the time used for sending data to the
	          * remaining controllers gives the first one time to process the input.
	          *
	          */

             copy_buffer(tx_buffer_3, BUFFER_SIZE_SPI3, rx_buffer_3, BUFFER_SIZE_SPI3);
 8000c94:	2340      	movs	r3, #64	; 0x40
 8000c96:	4a35      	ldr	r2, [pc, #212]	; (8000d6c <main+0x694>)
 8000c98:	2140      	movs	r1, #64	; 0x40
 8000c9a:	482d      	ldr	r0, [pc, #180]	; (8000d50 <main+0x678>)
 8000c9c:	f7ff fc64 	bl	8000568 <copy_buffer>
//			   ad7730_read_register(dev_idx, REG_DAC_REGISTER, &tx_buffer_3[dev_idx*CONFIGDATA_SIZE + 3], slave_infos);
//		     }
//             for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
//			   ad7730_read_register(dev_idx, REG_MODE_REGISTER, &tx_buffer_3[dev_idx*CONFIGDATA_SIZE + 6], slave_infos);
//			 }
             if(!conv_cmd){
 8000ca0:	4b33      	ldr	r3, [pc, #204]	; (8000d70 <main+0x698>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d129      	bne.n	8000cfc <main+0x624>
				 for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000ca8:	2300      	movs	r3, #0
 8000caa:	777b      	strb	r3, [r7, #29]
 8000cac:	e020      	b.n	8000cf0 <main+0x618>
				   uint8_t conversion_command[2] = {mode_register[0], mode_register[1] | CHANNEL_A1};
 8000cae:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <main+0x67c>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	703b      	strb	r3, [r7, #0]
 8000cb4:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <main+0x67c>)
 8000cb6:	785b      	ldrb	r3, [r3, #1]
 8000cb8:	707b      	strb	r3, [r7, #1]
				   ad7730_write_register(dev_idx, REG_MODE_REGISTER, conversion_command, slave_infos);
 8000cba:	7f78      	ldrb	r0, [r7, #29]
 8000cbc:	463a      	mov	r2, r7
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <main+0x670>)
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	f7ff fb39 	bl	8000338 <ad7730_write_register>
				   while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
 8000cc6:	e001      	b.n	8000ccc <main+0x5f4>
					  uint8_t dbg = dev_idx;
 8000cc8:	7f7b      	ldrb	r3, [r7, #29]
 8000cca:	75fb      	strb	r3, [r7, #23]
				   while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
 8000ccc:	7f7b      	ldrb	r3, [r7, #29]
 8000cce:	4a22      	ldr	r2, [pc, #136]	; (8000d58 <main+0x680>)
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	6858      	ldr	r0, [r3, #4]
 8000cd6:	7f7b      	ldrb	r3, [r7, #29]
 8000cd8:	4a1f      	ldr	r2, [pc, #124]	; (8000d58 <main+0x680>)
 8000cda:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	f001 fa2a 	bl	8002138 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d0ee      	beq.n	8000cc8 <main+0x5f0>
				 for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000cea:	7f7b      	ldrb	r3, [r7, #29]
 8000cec:	3301      	adds	r3, #1
 8000cee:	777b      	strb	r3, [r7, #29]
 8000cf0:	7f7b      	ldrb	r3, [r7, #29]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d9db      	bls.n	8000cae <main+0x5d6>
				   }
				 }
				 conv_cmd = 1;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <main+0x698>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	701a      	strb	r2, [r3, #0]
//			   ad7730_read_register(dev_idx, REG_DAC_REGISTER, &tx_buffer_3[dev_idx*CONFIGDATA_SIZE + 3], slave_infos);
//			 }
//		     for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
//		       ad7730_read_register(dev_idx, REG_MODE_REGISTER, &tx_buffer_3[dev_idx*CONFIGDATA_SIZE + 3], slave_infos);
//			 }
	         for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	773b      	strb	r3, [r7, #28]
 8000d00:	e00d      	b.n	8000d1e <main+0x646>
//	           while (HAL_GPIO_ReadPin(ready_infos[dev_idx].rdy_port, ready_infos[dev_idx].rdy_pin) == GPIO_PIN_SET) {
//	         	  //uint8_t dbg = dev_idx;
//	           }
	           ad7730_read_register(dev_idx, REG_DATA_REGISTER, &tx_buffer_3[dev_idx * DATA_SIZE], slave_infos);
 8000d02:	7f38      	ldrb	r0, [r7, #28]
 8000d04:	7f3a      	ldrb	r2, [r7, #28]
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <main+0x678>)
 8000d0e:	441a      	add	r2, r3
 8000d10:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <main+0x670>)
 8000d12:	2101      	movs	r1, #1
 8000d14:	f7ff fad6 	bl	80002c4 <ad7730_read_register>
	         for (uint8_t dev_idx = 0; dev_idx < TRANSDUCER_NUMBER; dev_idx++) {
 8000d18:	7f3b      	ldrb	r3, [r7, #28]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	773b      	strb	r3, [r7, #28]
 8000d1e:	7f3b      	ldrb	r3, [r7, #28]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d9ee      	bls.n	8000d02 <main+0x62a>

	         /*
	          * Switch shadow buffer when new data is available
	          * and set indicator flag for SPI-slave callback
	          */
	         if (buffer_updated == 1) {
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <main+0x684>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d13b      	bne.n	8000da4 <main+0x6cc>
	           switch (active_buffer) {
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <main+0x688>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <main+0x662>
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d01d      	beq.n	8000d74 <main+0x69c>
 8000d38:	e023      	b.n	8000d82 <main+0x6aa>
	             case 0:
	               copy_buffer(shadow_buffer_3_0, BUFFER_SIZE_SPI3, tx_buffer_3, BUFFER_SIZE_SPI3);
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <main+0x678>)
 8000d3e:	2140      	movs	r1, #64	; 0x40
 8000d40:	4808      	ldr	r0, [pc, #32]	; (8000d64 <main+0x68c>)
 8000d42:	f7ff fc11 	bl	8000568 <copy_buffer>
	               break;
 8000d46:	e01c      	b.n	8000d82 <main+0x6aa>
 8000d48:	20000054 	.word	0x20000054
 8000d4c:	20000050 	.word	0x20000050
 8000d50:	20000158 	.word	0x20000158
 8000d54:	2000004c 	.word	0x2000004c
 8000d58:	2000007c 	.word	0x2000007c
 8000d5c:	200000cd 	.word	0x200000cd
 8000d60:	200000cc 	.word	0x200000cc
 8000d64:	20000114 	.word	0x20000114
 8000d68:	200000d0 	.word	0x200000d0
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	200000ce 	.word	0x200000ce

	             case 1:
	               copy_buffer(shadow_buffer_3_1, BUFFER_SIZE_SPI3, tx_buffer_3, BUFFER_SIZE_SPI3);
 8000d74:	2340      	movs	r3, #64	; 0x40
 8000d76:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <main+0x6d0>)
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <main+0x6d4>)
 8000d7c:	f7ff fbf4 	bl	8000568 <copy_buffer>
	               break;
 8000d80:	bf00      	nop
	           }
	           active_buffer ^= 1;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <main+0x6d8>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	f083 0301 	eor.w	r3, r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <main+0x6d8>)
 8000d8e:	701a      	strb	r2, [r3, #0]
	           buffer_updated = 0;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <main+0x6dc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
	         }

	         break;
 8000d96:	e005      	b.n	8000da4 <main+0x6cc>
	    	   break;
 8000d98:	bf00      	nop
 8000d9a:	e4c5      	b.n	8000728 <main+0x50>
			 break;
 8000d9c:	bf00      	nop
 8000d9e:	e4c3      	b.n	8000728 <main+0x50>
			   break;
 8000da0:	bf00      	nop
 8000da2:	e4c1      	b.n	8000728 <main+0x50>
	         break;
 8000da4:	bf00      	nop
	  switch (slave_state) {
 8000da6:	e4bf      	b.n	8000728 <main+0x50>
 8000da8:	20000158 	.word	0x20000158
 8000dac:	200000d0 	.word	0x200000d0
 8000db0:	200000cc 	.word	0x200000cc
 8000db4:	200000cd 	.word	0x200000cd

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	; 0x40
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	2228      	movs	r2, #40	; 0x28
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 fe0e 	bl	80039e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dea:	2301      	movs	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000df8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 f9e0 	bl	80021c8 <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000e0e:	f000 f819 	bl	8000e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2302      	movs	r3, #2
 8000e18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fc4b 	bl	80026c8 <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e38:	f000 f804 	bl	8000e44 <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3740      	adds	r7, #64	; 0x40
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1);
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x4>
	...

08000e4c <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e52:	4a18      	ldr	r2, [pc, #96]	; (8000eb4 <MX_SPI2_Init+0x68>)
 8000e54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e98:	220a      	movs	r2, #10
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <MX_SPI2_Init+0x64>)
 8000e9e:	f001 fd7f 	bl	80029a0 <HAL_SPI_Init>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ea8:	f7ff ffcc 	bl	8000e44 <Error_Handler>
  }

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000198 	.word	0x20000198
 8000eb4:	40003800 	.word	0x40003800

08000eb8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <MX_SPI3_Init+0x64>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000f00:	220a      	movs	r2, #10
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_SPI3_Init+0x60>)
 8000f06:	f001 fd4b 	bl	80029a0 <HAL_SPI_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_SPI3_Init+0x5c>
  {
    Error_Handler();
 8000f10:	f7ff ff98 	bl	8000e44 <Error_Handler>
  }

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200001f0 	.word	0x200001f0
 8000f1c:	40003c00 	.word	0x40003c00

08000f20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a73      	ldr	r2, [pc, #460]	; (8001108 <HAL_SPI_MspInit+0x1e8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d13a      	bne.n	8000fb6 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f40:	4b72      	ldr	r3, [pc, #456]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000f42:	69db      	ldr	r3, [r3, #28]
 8000f44:	4a71      	ldr	r2, [pc, #452]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4a:	61d3      	str	r3, [r2, #28]
 8000f4c:	4b6f      	ldr	r3, [pc, #444]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b6c      	ldr	r3, [pc, #432]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a6b      	ldr	r2, [pc, #428]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b69      	ldr	r3, [pc, #420]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f70:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	4619      	mov	r1, r3
 8000f84:	4862      	ldr	r0, [pc, #392]	; (8001110 <HAL_SPI_MspInit+0x1f0>)
 8000f86:	f000 ff6d 	bl	8001e64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	485c      	ldr	r0, [pc, #368]	; (8001110 <HAL_SPI_MspInit+0x1f0>)
 8000fa0:	f000 ff60 	bl	8001e64 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2024      	movs	r0, #36	; 0x24
 8000faa:	f000 fadc 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000fae:	2024      	movs	r0, #36	; 0x24
 8000fb0:	f000 faf5 	bl	800159e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000fb4:	e0a4      	b.n	8001100 <HAL_SPI_MspInit+0x1e0>
  else if(spiHandle->Instance==SPI3)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a56      	ldr	r2, [pc, #344]	; (8001114 <HAL_SPI_MspInit+0x1f4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	f040 809f 	bne.w	8001100 <HAL_SPI_MspInit+0x1e0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fc2:	4b52      	ldr	r3, [pc, #328]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	4a51      	ldr	r2, [pc, #324]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000fc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fcc:	61d3      	str	r3, [r2, #28]
 8000fce:	4b4f      	ldr	r3, [pc, #316]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b4c      	ldr	r3, [pc, #304]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	4a4b      	ldr	r2, [pc, #300]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000fe0:	f043 0304 	orr.w	r3, r3, #4
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	4b49      	ldr	r3, [pc, #292]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b46      	ldr	r3, [pc, #280]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4a45      	ldr	r2, [pc, #276]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6193      	str	r3, [r2, #24]
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <HAL_SPI_MspInit+0x1ec>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800100a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	4619      	mov	r1, r3
 800101e:	483e      	ldr	r0, [pc, #248]	; (8001118 <HAL_SPI_MspInit+0x1f8>)
 8001020:	f000 ff20 	bl	8001e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001024:	2328      	movs	r3, #40	; 0x28
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4619      	mov	r1, r3
 8001036:	4836      	ldr	r0, [pc, #216]	; (8001110 <HAL_SPI_MspInit+0x1f0>)
 8001038:	f000 ff14 	bl	8001e64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800103c:	2310      	movs	r3, #16
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	4619      	mov	r1, r3
 800104e:	4830      	ldr	r0, [pc, #192]	; (8001110 <HAL_SPI_MspInit+0x1f0>)
 8001050:	f000 ff08 	bl	8001e64 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA2_Channel1;
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 8001056:	4a32      	ldr	r2, [pc, #200]	; (8001120 <HAL_SPI_MspInit+0x200>)
 8001058:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800105a:	4b30      	ldr	r3, [pc, #192]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001066:	4b2d      	ldr	r3, [pc, #180]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 8001080:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001084:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8001086:	4825      	ldr	r0, [pc, #148]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 8001088:	f000 faa4 	bl	80015d4 <HAL_DMA_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_SPI_MspInit+0x176>
      Error_Handler();
 8001092:	f7ff fed7 	bl	8000e44 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a20      	ldr	r2, [pc, #128]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 800109a:	64da      	str	r2, [r3, #76]	; 0x4c
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <HAL_SPI_MspInit+0x1fc>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_spi3_tx.Instance = DMA2_Channel2;
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <HAL_SPI_MspInit+0x208>)
 80010a6:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a8:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010aa:	2210      	movs	r2, #16
 80010ac:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010ce:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80010d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80010d4:	4813      	ldr	r0, [pc, #76]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010d6:	f000 fa7d 	bl	80015d4 <HAL_DMA_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_SPI_MspInit+0x1c4>
      Error_Handler();
 80010e0:	f7ff feb0 	bl	8000e44 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010e8:	649a      	str	r2, [r3, #72]	; 0x48
 80010ea:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <HAL_SPI_MspInit+0x204>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2033      	movs	r0, #51	; 0x33
 80010f6:	f000 fa36 	bl	8001566 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80010fa:	2033      	movs	r0, #51	; 0x33
 80010fc:	f000 fa4f 	bl	800159e <HAL_NVIC_EnableIRQ>
}
 8001100:	bf00      	nop
 8001102:	3730      	adds	r7, #48	; 0x30
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40003800 	.word	0x40003800
 800110c:	40021000 	.word	0x40021000
 8001110:	40010c00 	.word	0x40010c00
 8001114:	40003c00 	.word	0x40003c00
 8001118:	40010800 	.word	0x40010800
 800111c:	2000028c 	.word	0x2000028c
 8001120:	40020408 	.word	0x40020408
 8001124:	20000248 	.word	0x20000248
 8001128:	4002041c 	.word	0x4002041c

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_MspInit+0x68>)
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_MspInit+0x68>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6193      	str	r3, [r2, #24]
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_MspInit+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_MspInit+0x68>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_MspInit+0x68>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_MspInit+0x68>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2101      	movs	r1, #1
 8001166:	f06f 0003 	mvn.w	r0, #3
 800116a:	f000 f9fc 	bl	8001566 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_MspInit+0x6c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_MspInit+0x6c>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <HardFault_Handler+0x4>

080011ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <MemManage_Handler+0x4>

080011b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <BusFault_Handler+0x4>

080011ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <UsageFault_Handler+0x4>

080011c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e8:	f000 f8ca 	bl	8001380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <SPI2_IRQHandler+0x10>)
 80011f6:	f002 f915 	bl	8003424 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000198 	.word	0x20000198

08001204 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <SPI3_IRQHandler+0x10>)
 800120a:	f002 f90b 	bl	8003424 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200001f0 	.word	0x200001f0

08001218 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <DMA2_Channel1_IRQHandler+0x10>)
 800121e:	f000 fbb7 	bl	8001990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000028c 	.word	0x2000028c

0800122c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <DMA2_Channel2_IRQHandler+0x10>)
 8001232:	f000 fbad 	bl	8001990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000248 	.word	0x20000248

08001240 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <SystemInit+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <SystemInit+0x5c>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <SystemInit+0x5c>)
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	4911      	ldr	r1, [pc, #68]	; (800129c <SystemInit+0x5c>)
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <SystemInit+0x60>)
 8001258:	4013      	ands	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <SystemInit+0x5c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <SystemInit+0x5c>)
 8001262:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <SystemInit+0x5c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SystemInit+0x5c>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <SystemInit+0x5c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <SystemInit+0x5c>)
 800127e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001282:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SystemInit+0x5c>)
 8001286:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800128a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SystemInit+0x64>)
 800128e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001292:	609a      	str	r2, [r3, #8]
#endif 
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000
 80012a0:	f8ff0000 	.word	0xf8ff0000
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012aa:	e003      	b.n	80012b4 <LoopCopyDataInit>

080012ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012b2:	3104      	adds	r1, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012b4:	480a      	ldr	r0, [pc, #40]	; (80012e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012bc:	d3f6      	bcc.n	80012ac <CopyDataInit>
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012c0:	e002      	b.n	80012c8 <LoopFillZerobss>

080012c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012c4:	f842 3b04 	str.w	r3, [r2], #4

080012c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012cc:	d3f9      	bcc.n	80012c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ce:	f7ff ffb7 	bl	8001240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f002 fb65 	bl	80039a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d6:	f7ff f9ff 	bl	80006d8 <main>
  bx lr
 80012da:	4770      	bx	lr
  ldr r3, =_sidata
 80012dc:	08003a44 	.word	0x08003a44
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012e4:	200000b0 	.word	0x200000b0
  ldr r2, =_sbss
 80012e8:	200000b0 	.word	0x200000b0
  ldr r3, = _ebss
 80012ec:	200002d4 	.word	0x200002d4

080012f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC1_2_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_Init+0x28>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_Init+0x28>)
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f923 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130a:	2000      	movs	r0, #0
 800130c:	f000 f808 	bl	8001320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001310:	f7ff ff0c 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40022000 	.word	0x40022000

08001320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x54>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x58>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f93b 	bl	80015ba <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f903 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	; (800137c <HAL_InitTick+0x5c>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200000a4 	.word	0x200000a4
 8001378:	200000ac 	.word	0x200000ac
 800137c:	200000a8 	.word	0x200000a8

08001380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_IncTick+0x1c>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_IncTick+0x20>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <HAL_IncTick+0x20>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	200000ac 	.word	0x200000ac
 80013a0:	200002d0 	.word	0x200002d0

080013a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b02      	ldr	r3, [pc, #8]	; (80013b4 <HAL_GetTick+0x10>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	200002d0 	.word	0x200002d0

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4906      	ldr	r1, [pc, #24]	; (8001450 <__NVIC_EnableIRQ+0x34>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	; (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	; 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	; 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff90 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff2d 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff42 	bl	8001400 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff90 	bl	80014a8 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5f 	bl	8001454 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff35 	bl	800141c <__NVIC_EnableIRQ>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffa2 	bl	800150c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e059      	b.n	800169e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_DMA_Init+0xd4>)
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d80f      	bhi.n	8001616 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_DMA_Init+0xd8>)
 80015fe:	4413      	add	r3, r2
 8001600:	4a2b      	ldr	r2, [pc, #172]	; (80016b0 <HAL_DMA_Init+0xdc>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	009a      	lsls	r2, r3, #2
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a28      	ldr	r2, [pc, #160]	; (80016b4 <HAL_DMA_Init+0xe0>)
 8001612:	63da      	str	r2, [r3, #60]	; 0x3c
 8001614:	e00e      	b.n	8001634 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_DMA_Init+0xe4>)
 800161e:	4413      	add	r3, r2
 8001620:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <HAL_DMA_Init+0xdc>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	009a      	lsls	r2, r3, #2
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a22      	ldr	r2, [pc, #136]	; (80016bc <HAL_DMA_Init+0xe8>)
 8001632:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800164a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800164e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40020407 	.word	0x40020407
 80016ac:	bffdfff8 	.word	0xbffdfff8
 80016b0:	cccccccd 	.word	0xcccccccd
 80016b4:	40020000 	.word	0x40020000
 80016b8:	bffdfbf8 	.word	0xbffdfbf8
 80016bc:	40020400 	.word	0x40020400

080016c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_DMA_Start_IT+0x20>
 80016dc:	2302      	movs	r3, #2
 80016de:	e04a      	b.n	8001776 <HAL_DMA_Start_IT+0xb6>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d13a      	bne.n	8001768 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2202      	movs	r2, #2
 80016f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 fb76 	bl	8001e08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	2b00      	cmp	r3, #0
 8001722:	d008      	beq.n	8001736 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 020e 	orr.w	r2, r2, #14
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e00f      	b.n	8001756 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0204 	bic.w	r2, r2, #4
 8001744:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 020a 	orr.w	r2, r2, #10
 8001754:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e005      	b.n	8001774 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001770:	2302      	movs	r3, #2
 8001772:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001774:	7dfb      	ldrb	r3, [r7, #23]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001792:	2b02      	cmp	r3, #2
 8001794:	d005      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2204      	movs	r2, #4
 800179a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e0d6      	b.n	8001950 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 020e 	bic.w	r2, r2, #14
 80017b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0201 	bic.w	r2, r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b64      	ldr	r3, [pc, #400]	; (800195c <HAL_DMA_Abort_IT+0x1dc>)
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d958      	bls.n	8001880 <HAL_DMA_Abort_IT+0x100>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a63      	ldr	r2, [pc, #396]	; (8001960 <HAL_DMA_Abort_IT+0x1e0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d04f      	beq.n	8001878 <HAL_DMA_Abort_IT+0xf8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a61      	ldr	r2, [pc, #388]	; (8001964 <HAL_DMA_Abort_IT+0x1e4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d048      	beq.n	8001874 <HAL_DMA_Abort_IT+0xf4>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a60      	ldr	r2, [pc, #384]	; (8001968 <HAL_DMA_Abort_IT+0x1e8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d040      	beq.n	800186e <HAL_DMA_Abort_IT+0xee>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a5e      	ldr	r2, [pc, #376]	; (800196c <HAL_DMA_Abort_IT+0x1ec>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d038      	beq.n	8001868 <HAL_DMA_Abort_IT+0xe8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5d      	ldr	r2, [pc, #372]	; (8001970 <HAL_DMA_Abort_IT+0x1f0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d030      	beq.n	8001862 <HAL_DMA_Abort_IT+0xe2>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5b      	ldr	r2, [pc, #364]	; (8001974 <HAL_DMA_Abort_IT+0x1f4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d028      	beq.n	800185c <HAL_DMA_Abort_IT+0xdc>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a53      	ldr	r2, [pc, #332]	; (800195c <HAL_DMA_Abort_IT+0x1dc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d020      	beq.n	8001856 <HAL_DMA_Abort_IT+0xd6>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a57      	ldr	r2, [pc, #348]	; (8001978 <HAL_DMA_Abort_IT+0x1f8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d019      	beq.n	8001852 <HAL_DMA_Abort_IT+0xd2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a56      	ldr	r2, [pc, #344]	; (800197c <HAL_DMA_Abort_IT+0x1fc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d012      	beq.n	800184e <HAL_DMA_Abort_IT+0xce>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a54      	ldr	r2, [pc, #336]	; (8001980 <HAL_DMA_Abort_IT+0x200>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00a      	beq.n	8001848 <HAL_DMA_Abort_IT+0xc8>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a53      	ldr	r2, [pc, #332]	; (8001984 <HAL_DMA_Abort_IT+0x204>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d102      	bne.n	8001842 <HAL_DMA_Abort_IT+0xc2>
 800183c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001840:	e01b      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 8001842:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001846:	e018      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 8001848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800184c:	e015      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 800184e:	2310      	movs	r3, #16
 8001850:	e013      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 8001852:	2301      	movs	r3, #1
 8001854:	e011      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 8001856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800185a:	e00e      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 800185c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001860:	e00b      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 8001862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001866:	e008      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 8001868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186c:	e005      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 800186e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001872:	e002      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 8001874:	2310      	movs	r3, #16
 8001876:	e000      	b.n	800187a <HAL_DMA_Abort_IT+0xfa>
 8001878:	2301      	movs	r3, #1
 800187a:	4a43      	ldr	r2, [pc, #268]	; (8001988 <HAL_DMA_Abort_IT+0x208>)
 800187c:	6053      	str	r3, [r2, #4]
 800187e:	e057      	b.n	8001930 <HAL_DMA_Abort_IT+0x1b0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a36      	ldr	r2, [pc, #216]	; (8001960 <HAL_DMA_Abort_IT+0x1e0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d04f      	beq.n	800192a <HAL_DMA_Abort_IT+0x1aa>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a35      	ldr	r2, [pc, #212]	; (8001964 <HAL_DMA_Abort_IT+0x1e4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d048      	beq.n	8001926 <HAL_DMA_Abort_IT+0x1a6>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a33      	ldr	r2, [pc, #204]	; (8001968 <HAL_DMA_Abort_IT+0x1e8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d040      	beq.n	8001920 <HAL_DMA_Abort_IT+0x1a0>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a32      	ldr	r2, [pc, #200]	; (800196c <HAL_DMA_Abort_IT+0x1ec>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d038      	beq.n	800191a <HAL_DMA_Abort_IT+0x19a>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a30      	ldr	r2, [pc, #192]	; (8001970 <HAL_DMA_Abort_IT+0x1f0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d030      	beq.n	8001914 <HAL_DMA_Abort_IT+0x194>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a2f      	ldr	r2, [pc, #188]	; (8001974 <HAL_DMA_Abort_IT+0x1f4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d028      	beq.n	800190e <HAL_DMA_Abort_IT+0x18e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <HAL_DMA_Abort_IT+0x1dc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d020      	beq.n	8001908 <HAL_DMA_Abort_IT+0x188>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a2b      	ldr	r2, [pc, #172]	; (8001978 <HAL_DMA_Abort_IT+0x1f8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d019      	beq.n	8001904 <HAL_DMA_Abort_IT+0x184>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a29      	ldr	r2, [pc, #164]	; (800197c <HAL_DMA_Abort_IT+0x1fc>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d012      	beq.n	8001900 <HAL_DMA_Abort_IT+0x180>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a28      	ldr	r2, [pc, #160]	; (8001980 <HAL_DMA_Abort_IT+0x200>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00a      	beq.n	80018fa <HAL_DMA_Abort_IT+0x17a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a26      	ldr	r2, [pc, #152]	; (8001984 <HAL_DMA_Abort_IT+0x204>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d102      	bne.n	80018f4 <HAL_DMA_Abort_IT+0x174>
 80018ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f2:	e01b      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 80018f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f8:	e018      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 80018fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fe:	e015      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 8001900:	2310      	movs	r3, #16
 8001902:	e013      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 8001904:	2301      	movs	r3, #1
 8001906:	e011      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 8001908:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800190c:	e00e      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 800190e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001912:	e00b      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 8001914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001918:	e008      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 800191a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800191e:	e005      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 8001920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001924:	e002      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 8001926:	2310      	movs	r3, #16
 8001928:	e000      	b.n	800192c <HAL_DMA_Abort_IT+0x1ac>
 800192a:	2301      	movs	r3, #1
 800192c:	4a17      	ldr	r2, [pc, #92]	; (800198c <HAL_DMA_Abort_IT+0x20c>)
 800192e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	4798      	blx	r3
    } 
  }
  return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40020080 	.word	0x40020080
 8001960:	40020008 	.word	0x40020008
 8001964:	4002001c 	.word	0x4002001c
 8001968:	40020030 	.word	0x40020030
 800196c:	40020044 	.word	0x40020044
 8001970:	40020058 	.word	0x40020058
 8001974:	4002006c 	.word	0x4002006c
 8001978:	40020408 	.word	0x40020408
 800197c:	4002041c 	.word	0x4002041c
 8001980:	40020430 	.word	0x40020430
 8001984:	40020444 	.word	0x40020444
 8001988:	40020400 	.word	0x40020400
 800198c:	40020000 	.word	0x40020000

08001990 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	2204      	movs	r2, #4
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80d6 	beq.w	8001b66 <HAL_DMA_IRQHandler+0x1d6>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80d0 	beq.w	8001b66 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d107      	bne.n	80019e4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0204 	bic.w	r2, r2, #4
 80019e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b9b      	ldr	r3, [pc, #620]	; (8001c58 <HAL_DMA_IRQHandler+0x2c8>)
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d958      	bls.n	8001aa2 <HAL_DMA_IRQHandler+0x112>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a99      	ldr	r2, [pc, #612]	; (8001c5c <HAL_DMA_IRQHandler+0x2cc>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d04f      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x10a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a98      	ldr	r2, [pc, #608]	; (8001c60 <HAL_DMA_IRQHandler+0x2d0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d048      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x106>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a96      	ldr	r2, [pc, #600]	; (8001c64 <HAL_DMA_IRQHandler+0x2d4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d040      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x100>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a95      	ldr	r2, [pc, #596]	; (8001c68 <HAL_DMA_IRQHandler+0x2d8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d038      	beq.n	8001a8a <HAL_DMA_IRQHandler+0xfa>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a93      	ldr	r2, [pc, #588]	; (8001c6c <HAL_DMA_IRQHandler+0x2dc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d030      	beq.n	8001a84 <HAL_DMA_IRQHandler+0xf4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a92      	ldr	r2, [pc, #584]	; (8001c70 <HAL_DMA_IRQHandler+0x2e0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d028      	beq.n	8001a7e <HAL_DMA_IRQHandler+0xee>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a89      	ldr	r2, [pc, #548]	; (8001c58 <HAL_DMA_IRQHandler+0x2c8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d020      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xe8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a8e      	ldr	r2, [pc, #568]	; (8001c74 <HAL_DMA_IRQHandler+0x2e4>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d019      	beq.n	8001a74 <HAL_DMA_IRQHandler+0xe4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a8c      	ldr	r2, [pc, #560]	; (8001c78 <HAL_DMA_IRQHandler+0x2e8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d012      	beq.n	8001a70 <HAL_DMA_IRQHandler+0xe0>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a8b      	ldr	r2, [pc, #556]	; (8001c7c <HAL_DMA_IRQHandler+0x2ec>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00a      	beq.n	8001a6a <HAL_DMA_IRQHandler+0xda>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a89      	ldr	r2, [pc, #548]	; (8001c80 <HAL_DMA_IRQHandler+0x2f0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d102      	bne.n	8001a64 <HAL_DMA_IRQHandler+0xd4>
 8001a5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a62:	e01b      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a68:	e018      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6e:	e015      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a70:	2340      	movs	r3, #64	; 0x40
 8001a72:	e013      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e011      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a7c:	e00e      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a82:	e00b      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a88:	e008      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a8e:	e005      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a94:	e002      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a96:	2340      	movs	r3, #64	; 0x40
 8001a98:	e000      	b.n	8001a9c <HAL_DMA_IRQHandler+0x10c>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	4a79      	ldr	r2, [pc, #484]	; (8001c84 <HAL_DMA_IRQHandler+0x2f4>)
 8001a9e:	6053      	str	r3, [r2, #4]
 8001aa0:	e057      	b.n	8001b52 <HAL_DMA_IRQHandler+0x1c2>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a6d      	ldr	r2, [pc, #436]	; (8001c5c <HAL_DMA_IRQHandler+0x2cc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d04f      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x1bc>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a6b      	ldr	r2, [pc, #428]	; (8001c60 <HAL_DMA_IRQHandler+0x2d0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d048      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x1b8>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a6a      	ldr	r2, [pc, #424]	; (8001c64 <HAL_DMA_IRQHandler+0x2d4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d040      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x1b2>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a68      	ldr	r2, [pc, #416]	; (8001c68 <HAL_DMA_IRQHandler+0x2d8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d038      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x1ac>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a67      	ldr	r2, [pc, #412]	; (8001c6c <HAL_DMA_IRQHandler+0x2dc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d030      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x1a6>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a65      	ldr	r2, [pc, #404]	; (8001c70 <HAL_DMA_IRQHandler+0x2e0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d028      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x1a0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a5d      	ldr	r2, [pc, #372]	; (8001c58 <HAL_DMA_IRQHandler+0x2c8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d020      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x19a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a61      	ldr	r2, [pc, #388]	; (8001c74 <HAL_DMA_IRQHandler+0x2e4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d019      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x196>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a60      	ldr	r2, [pc, #384]	; (8001c78 <HAL_DMA_IRQHandler+0x2e8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d012      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x192>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a5e      	ldr	r2, [pc, #376]	; (8001c7c <HAL_DMA_IRQHandler+0x2ec>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00a      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x18c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a5d      	ldr	r2, [pc, #372]	; (8001c80 <HAL_DMA_IRQHandler+0x2f0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d102      	bne.n	8001b16 <HAL_DMA_IRQHandler+0x186>
 8001b10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b14:	e01b      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b1a:	e018      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b20:	e015      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b22:	2340      	movs	r3, #64	; 0x40
 8001b24:	e013      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b26:	2304      	movs	r3, #4
 8001b28:	e011      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b2e:	e00e      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b34:	e00b      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b3a:	e008      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b40:	e005      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b46:	e002      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b48:	2340      	movs	r3, #64	; 0x40
 8001b4a:	e000      	b.n	8001b4e <HAL_DMA_IRQHandler+0x1be>
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	4a4e      	ldr	r2, [pc, #312]	; (8001c88 <HAL_DMA_IRQHandler+0x2f8>)
 8001b50:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8136 	beq.w	8001dc8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b64:	e130      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 80f8 	beq.w	8001d68 <HAL_DMA_IRQHandler+0x3d8>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80f2 	beq.w	8001d68 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10b      	bne.n	8001baa <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 020a 	bic.w	r2, r2, #10
 8001ba0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_DMA_IRQHandler+0x2c8>)
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d973      	bls.n	8001c9e <HAL_DMA_IRQHandler+0x30e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a28      	ldr	r2, [pc, #160]	; (8001c5c <HAL_DMA_IRQHandler+0x2cc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d06a      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x306>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <HAL_DMA_IRQHandler+0x2d0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d063      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x302>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a25      	ldr	r2, [pc, #148]	; (8001c64 <HAL_DMA_IRQHandler+0x2d4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d05b      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x2fc>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a23      	ldr	r2, [pc, #140]	; (8001c68 <HAL_DMA_IRQHandler+0x2d8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d038      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x2c0>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <HAL_DMA_IRQHandler+0x2dc>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d030      	beq.n	8001c4a <HAL_DMA_IRQHandler+0x2ba>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <HAL_DMA_IRQHandler+0x2e0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d028      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x2b4>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <HAL_DMA_IRQHandler+0x2c8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d020      	beq.n	8001c3e <HAL_DMA_IRQHandler+0x2ae>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <HAL_DMA_IRQHandler+0x2e4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x2aa>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <HAL_DMA_IRQHandler+0x2e8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d012      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x2a6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a19      	ldr	r2, [pc, #100]	; (8001c7c <HAL_DMA_IRQHandler+0x2ec>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00a      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2a0>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a18      	ldr	r2, [pc, #96]	; (8001c80 <HAL_DMA_IRQHandler+0x2f0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d102      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x29a>
 8001c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c28:	e036      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c2e:	e033      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c34:	e030      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c36:	2320      	movs	r3, #32
 8001c38:	e02e      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e02c      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c42:	e029      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c48:	e026      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4e:	e023      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c54:	e020      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c56:	bf00      	nop
 8001c58:	40020080 	.word	0x40020080
 8001c5c:	40020008 	.word	0x40020008
 8001c60:	4002001c 	.word	0x4002001c
 8001c64:	40020030 	.word	0x40020030
 8001c68:	40020044 	.word	0x40020044
 8001c6c:	40020058 	.word	0x40020058
 8001c70:	4002006c 	.word	0x4002006c
 8001c74:	40020408 	.word	0x40020408
 8001c78:	4002041c 	.word	0x4002041c
 8001c7c:	40020430 	.word	0x40020430
 8001c80:	40020444 	.word	0x40020444
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c90:	e002      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c92:	2320      	movs	r3, #32
 8001c94:	e000      	b.n	8001c98 <HAL_DMA_IRQHandler+0x308>
 8001c96:	2302      	movs	r3, #2
 8001c98:	4a4e      	ldr	r2, [pc, #312]	; (8001dd4 <HAL_DMA_IRQHandler+0x444>)
 8001c9a:	6053      	str	r3, [r2, #4]
 8001c9c:	e057      	b.n	8001d4e <HAL_DMA_IRQHandler+0x3be>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a4d      	ldr	r2, [pc, #308]	; (8001dd8 <HAL_DMA_IRQHandler+0x448>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d04f      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x3b8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a4b      	ldr	r2, [pc, #300]	; (8001ddc <HAL_DMA_IRQHandler+0x44c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d048      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x3b4>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <HAL_DMA_IRQHandler+0x450>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d040      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x3ae>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a48      	ldr	r2, [pc, #288]	; (8001de4 <HAL_DMA_IRQHandler+0x454>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d038      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x3a8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a47      	ldr	r2, [pc, #284]	; (8001de8 <HAL_DMA_IRQHandler+0x458>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d030      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x3a2>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a45      	ldr	r2, [pc, #276]	; (8001dec <HAL_DMA_IRQHandler+0x45c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d028      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x39c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a44      	ldr	r2, [pc, #272]	; (8001df0 <HAL_DMA_IRQHandler+0x460>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d020      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x396>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a42      	ldr	r2, [pc, #264]	; (8001df4 <HAL_DMA_IRQHandler+0x464>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d019      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x392>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a41      	ldr	r2, [pc, #260]	; (8001df8 <HAL_DMA_IRQHandler+0x468>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d012      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x38e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <HAL_DMA_IRQHandler+0x46c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00a      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x388>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3e      	ldr	r2, [pc, #248]	; (8001e00 <HAL_DMA_IRQHandler+0x470>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d102      	bne.n	8001d12 <HAL_DMA_IRQHandler+0x382>
 8001d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d10:	e01b      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d16:	e018      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d1c:	e015      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e013      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e011      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d2a:	e00e      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d30:	e00b      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d36:	e008      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3c:	e005      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d42:	e002      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d44:	2320      	movs	r3, #32
 8001d46:	e000      	b.n	8001d4a <HAL_DMA_IRQHandler+0x3ba>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	4a2e      	ldr	r2, [pc, #184]	; (8001e04 <HAL_DMA_IRQHandler+0x474>)
 8001d4c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d034      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d66:	e02f      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d028      	beq.n	8001dca <HAL_DMA_IRQHandler+0x43a>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d023      	beq.n	8001dca <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 020e 	bic.w	r2, r2, #14
 8001d90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	4798      	blx	r3
    }
  }
  return;
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
}
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40020400 	.word	0x40020400
 8001dd8:	40020008 	.word	0x40020008
 8001ddc:	4002001c 	.word	0x4002001c
 8001de0:	40020030 	.word	0x40020030
 8001de4:	40020044 	.word	0x40020044
 8001de8:	40020058 	.word	0x40020058
 8001dec:	4002006c 	.word	0x4002006c
 8001df0:	40020080 	.word	0x40020080
 8001df4:	40020408 	.word	0x40020408
 8001df8:	4002041c 	.word	0x4002041c
 8001dfc:	40020430 	.word	0x40020430
 8001e00:	40020444 	.word	0x40020444
 8001e04:	40020000 	.word	0x40020000

08001e08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1e:	2101      	movs	r1, #1
 8001e20:	fa01 f202 	lsl.w	r2, r1, r2
 8001e24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d108      	bne.n	8001e48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e46:	e007      	b.n	8001e58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	60da      	str	r2, [r3, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e76:	e133      	b.n	80020e0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69fa      	ldr	r2, [r7, #28]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	f040 8122 	bne.w	80020da <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b12      	cmp	r3, #18
 8001e9c:	d034      	beq.n	8001f08 <HAL_GPIO_Init+0xa4>
 8001e9e:	2b12      	cmp	r3, #18
 8001ea0:	d80d      	bhi.n	8001ebe <HAL_GPIO_Init+0x5a>
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d02b      	beq.n	8001efe <HAL_GPIO_Init+0x9a>
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d804      	bhi.n	8001eb4 <HAL_GPIO_Init+0x50>
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d031      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d01c      	beq.n	8001eec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb2:	e048      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d043      	beq.n	8001f40 <HAL_GPIO_Init+0xdc>
 8001eb8:	2b11      	cmp	r3, #17
 8001eba:	d01b      	beq.n	8001ef4 <HAL_GPIO_Init+0x90>
          break;
 8001ebc:	e043      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ebe:	4a8f      	ldr	r2, [pc, #572]	; (80020fc <HAL_GPIO_Init+0x298>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d026      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
 8001ec4:	4a8d      	ldr	r2, [pc, #564]	; (80020fc <HAL_GPIO_Init+0x298>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d806      	bhi.n	8001ed8 <HAL_GPIO_Init+0x74>
 8001eca:	4a8d      	ldr	r2, [pc, #564]	; (8002100 <HAL_GPIO_Init+0x29c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d020      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
 8001ed0:	4a8c      	ldr	r2, [pc, #560]	; (8002104 <HAL_GPIO_Init+0x2a0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01d      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
          break;
 8001ed6:	e036      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ed8:	4a8b      	ldr	r2, [pc, #556]	; (8002108 <HAL_GPIO_Init+0x2a4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
 8001ede:	4a8b      	ldr	r2, [pc, #556]	; (800210c <HAL_GPIO_Init+0x2a8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d016      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
 8001ee4:	4a8a      	ldr	r2, [pc, #552]	; (8002110 <HAL_GPIO_Init+0x2ac>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0xae>
          break;
 8001eea:	e02c      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e028      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e023      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	3308      	adds	r3, #8
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e01e      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e019      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	623b      	str	r3, [r7, #32]
          break;
 8001f1e:	e012      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	611a      	str	r2, [r3, #16]
          break;
 8001f32:	e008      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f34:	2308      	movs	r3, #8
 8001f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	615a      	str	r2, [r3, #20]
          break;
 8001f3e:	e002      	b.n	8001f46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2bff      	cmp	r3, #255	; 0xff
 8001f4a:	d801      	bhi.n	8001f50 <HAL_GPIO_Init+0xec>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	e001      	b.n	8001f54 <HAL_GPIO_Init+0xf0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2bff      	cmp	r3, #255	; 0xff
 8001f5a:	d802      	bhi.n	8001f62 <HAL_GPIO_Init+0xfe>
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x104>
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	3b08      	subs	r3, #8
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	210f      	movs	r1, #15
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	401a      	ands	r2, r3
 8001f7a:	6a39      	ldr	r1, [r7, #32]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	431a      	orrs	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a2 	beq.w	80020da <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4a5e      	ldr	r2, [pc, #376]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6193      	str	r3, [r2, #24]
 8001fa2:	4b5c      	ldr	r3, [pc, #368]	; (8002114 <HAL_GPIO_Init+0x2b0>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fae:	4a5a      	ldr	r2, [pc, #360]	; (8002118 <HAL_GPIO_Init+0x2b4>)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	; (800211c <HAL_GPIO_Init+0x2b8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01f      	beq.n	800201a <HAL_GPIO_Init+0x1b6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a50      	ldr	r2, [pc, #320]	; (8002120 <HAL_GPIO_Init+0x2bc>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d019      	beq.n	8002016 <HAL_GPIO_Init+0x1b2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	; (8002124 <HAL_GPIO_Init+0x2c0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_GPIO_Init+0x1ae>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_GPIO_Init+0x2c4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00d      	beq.n	800200e <HAL_GPIO_Init+0x1aa>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_GPIO_Init+0x2c8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <HAL_GPIO_Init+0x1a6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_GPIO_Init+0x2cc>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_GPIO_Init+0x1a2>
 8002002:	2305      	movs	r3, #5
 8002004:	e00a      	b.n	800201c <HAL_GPIO_Init+0x1b8>
 8002006:	2306      	movs	r3, #6
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x1b8>
 800200a:	2304      	movs	r3, #4
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x1b8>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x1b8>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x1b8>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x1b8>
 800201a:	2300      	movs	r3, #0
 800201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800202c:	493a      	ldr	r1, [pc, #232]	; (8002118 <HAL_GPIO_Init+0x2b4>)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d006      	beq.n	8002054 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002046:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	493a      	ldr	r1, [pc, #232]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
 8002052:	e006      	b.n	8002062 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002054:	4b37      	ldr	r3, [pc, #220]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	43db      	mvns	r3, r3
 800205c:	4935      	ldr	r1, [pc, #212]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 800205e:	4013      	ands	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4930      	ldr	r1, [pc, #192]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
 800207a:	e006      	b.n	800208a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800207c:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	43db      	mvns	r3, r3
 8002084:	492b      	ldr	r1, [pc, #172]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002086:	4013      	ands	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002096:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	4926      	ldr	r1, [pc, #152]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	608b      	str	r3, [r1, #8]
 80020a2:	e006      	b.n	80020b2 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a4:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	4921      	ldr	r1, [pc, #132]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	491c      	ldr	r1, [pc, #112]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60cb      	str	r3, [r1, #12]
 80020ca:	e006      	b.n	80020da <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	4917      	ldr	r1, [pc, #92]	; (8002134 <HAL_GPIO_Init+0x2d0>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	3301      	adds	r3, #1
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f47f aec4 	bne.w	8001e78 <HAL_GPIO_Init+0x14>
  }
}
 80020f0:	bf00      	nop
 80020f2:	372c      	adds	r7, #44	; 0x2c
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	10210000 	.word	0x10210000
 8002100:	10110000 	.word	0x10110000
 8002104:	10120000 	.word	0x10120000
 8002108:	10310000 	.word	0x10310000
 800210c:	10320000 	.word	0x10320000
 8002110:	10220000 	.word	0x10220000
 8002114:	40021000 	.word	0x40021000
 8002118:	40010000 	.word	0x40010000
 800211c:	40010800 	.word	0x40010800
 8002120:	40010c00 	.word	0x40010c00
 8002124:	40011000 	.word	0x40011000
 8002128:	40011400 	.word	0x40011400
 800212c:	40011800 	.word	0x40011800
 8002130:	40011c00 	.word	0x40011c00
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	e001      	b.n	800215a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800215a:	7bfb      	ldrb	r3, [r7, #15]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	807b      	strh	r3, [r7, #2]
 8002172:	4613      	mov	r3, r2
 8002174:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002176:	787b      	ldrb	r3, [r7, #1]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217c:	887a      	ldrh	r2, [r7, #2]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002182:	e003      	b.n	800218c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	041a      	lsls	r2, r3, #16
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	611a      	str	r2, [r3, #16]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e26c      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8087 	beq.w	80022f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e8:	4b92      	ldr	r3, [pc, #584]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d00c      	beq.n	800220e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021f4:	4b8f      	ldr	r3, [pc, #572]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d112      	bne.n	8002226 <HAL_RCC_OscConfig+0x5e>
 8002200:	4b8c      	ldr	r3, [pc, #560]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220c:	d10b      	bne.n	8002226 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220e:	4b89      	ldr	r3, [pc, #548]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d06c      	beq.n	80022f4 <HAL_RCC_OscConfig+0x12c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d168      	bne.n	80022f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e246      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x76>
 8002230:	4b80      	ldr	r3, [pc, #512]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a7f      	ldr	r2, [pc, #508]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	e02e      	b.n	800229c <HAL_RCC_OscConfig+0xd4>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10c      	bne.n	8002260 <HAL_RCC_OscConfig+0x98>
 8002246:	4b7b      	ldr	r3, [pc, #492]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a7a      	ldr	r2, [pc, #488]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	4b78      	ldr	r3, [pc, #480]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a77      	ldr	r2, [pc, #476]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002258:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	e01d      	b.n	800229c <HAL_RCC_OscConfig+0xd4>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0xbc>
 800226a:	4b72      	ldr	r3, [pc, #456]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a71      	ldr	r2, [pc, #452]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b6f      	ldr	r3, [pc, #444]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a6e      	ldr	r2, [pc, #440]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e00b      	b.n	800229c <HAL_RCC_OscConfig+0xd4>
 8002284:	4b6b      	ldr	r3, [pc, #428]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a6a      	ldr	r2, [pc, #424]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4b68      	ldr	r3, [pc, #416]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a67      	ldr	r2, [pc, #412]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d013      	beq.n	80022cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f87e 	bl	80013a4 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ac:	f7ff f87a 	bl	80013a4 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1fa      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	4b5d      	ldr	r3, [pc, #372]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0xe4>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff f86a 	bl	80013a4 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff f866 	bl	80013a4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e1e6      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	4b53      	ldr	r3, [pc, #332]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x10c>
 80022f2:	e000      	b.n	80022f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d063      	beq.n	80023ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002302:	4b4c      	ldr	r3, [pc, #304]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800230e:	4b49      	ldr	r3, [pc, #292]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b08      	cmp	r3, #8
 8002318:	d11c      	bne.n	8002354 <HAL_RCC_OscConfig+0x18c>
 800231a:	4b46      	ldr	r3, [pc, #280]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d116      	bne.n	8002354 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	4b43      	ldr	r3, [pc, #268]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d005      	beq.n	800233e <HAL_RCC_OscConfig+0x176>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e1ba      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4939      	ldr	r1, [pc, #228]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002352:	e03a      	b.n	80023ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d020      	beq.n	800239e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_OscConfig+0x270>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7ff f81f 	bl	80013a4 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236a:	f7ff f81b 	bl	80013a4 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e19b      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237c:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f0      	beq.n	800236a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4927      	ldr	r1, [pc, #156]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002398:	4313      	orrs	r3, r2
 800239a:	600b      	str	r3, [r1, #0]
 800239c:	e015      	b.n	80023ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <HAL_RCC_OscConfig+0x270>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fffe 	bl	80013a4 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ac:	f7fe fffa 	bl	80013a4 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e17a      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d03a      	beq.n	800244c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d019      	beq.n	8002412 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <HAL_RCC_OscConfig+0x274>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7fe ffde 	bl	80013a4 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ec:	f7fe ffda 	bl	80013a4 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e15a      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_RCC_OscConfig+0x26c>)
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800240a:	2001      	movs	r0, #1
 800240c:	f000 faaa 	bl	8002964 <RCC_Delay>
 8002410:	e01c      	b.n	800244c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_RCC_OscConfig+0x274>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002418:	f7fe ffc4 	bl	80013a4 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241e:	e00f      	b.n	8002440 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe ffc0 	bl	80013a4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d908      	bls.n	8002440 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e140      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	42420000 	.word	0x42420000
 800243c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002440:	4b9e      	ldr	r3, [pc, #632]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e9      	bne.n	8002420 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80a6 	beq.w	80025a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245e:	4b97      	ldr	r3, [pc, #604]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10d      	bne.n	8002486 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b94      	ldr	r3, [pc, #592]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	4a93      	ldr	r2, [pc, #588]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	61d3      	str	r3, [r2, #28]
 8002476:	4b91      	ldr	r3, [pc, #580]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	4b8e      	ldr	r3, [pc, #568]	; (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d118      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002492:	4b8b      	ldr	r3, [pc, #556]	; (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a8a      	ldr	r2, [pc, #552]	; (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f7fe ff81 	bl	80013a4 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7fe ff7d 	bl	80013a4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b64      	cmp	r3, #100	; 0x64
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0fd      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	4b81      	ldr	r3, [pc, #516]	; (80026c0 <HAL_RCC_OscConfig+0x4f8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x312>
 80024cc:	4b7b      	ldr	r3, [pc, #492]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a7a      	ldr	r2, [pc, #488]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	e02d      	b.n	8002536 <HAL_RCC_OscConfig+0x36e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x334>
 80024e2:	4b76      	ldr	r3, [pc, #472]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a75      	ldr	r2, [pc, #468]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	4b73      	ldr	r3, [pc, #460]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4a72      	ldr	r2, [pc, #456]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	6213      	str	r3, [r2, #32]
 80024fa:	e01c      	b.n	8002536 <HAL_RCC_OscConfig+0x36e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b05      	cmp	r3, #5
 8002502:	d10c      	bne.n	800251e <HAL_RCC_OscConfig+0x356>
 8002504:	4b6d      	ldr	r3, [pc, #436]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a6c      	ldr	r2, [pc, #432]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a69      	ldr	r2, [pc, #420]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	e00b      	b.n	8002536 <HAL_RCC_OscConfig+0x36e>
 800251e:	4b67      	ldr	r3, [pc, #412]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a66      	ldr	r2, [pc, #408]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	4b64      	ldr	r3, [pc, #400]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4a63      	ldr	r2, [pc, #396]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d015      	beq.n	800256a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7fe ff31 	bl	80013a4 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7fe ff2d 	bl	80013a4 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0ab      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	4b57      	ldr	r3, [pc, #348]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ee      	beq.n	8002546 <HAL_RCC_OscConfig+0x37e>
 8002568:	e014      	b.n	8002594 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256a:	f7fe ff1b 	bl	80013a4 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe ff17 	bl	80013a4 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e095      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	4b4c      	ldr	r3, [pc, #304]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1ee      	bne.n	8002572 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d105      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259a:	4b48      	ldr	r3, [pc, #288]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4a47      	ldr	r2, [pc, #284]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8081 	beq.w	80026b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b0:	4b42      	ldr	r3, [pc, #264]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d061      	beq.n	8002680 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d146      	bne.n	8002652 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <HAL_RCC_OscConfig+0x4fc>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7fe feeb 	bl	80013a4 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d2:	f7fe fee7 	bl	80013a4 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e067      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e4:	4b35      	ldr	r3, [pc, #212]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f8:	d108      	bne.n	800260c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025fa:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	492d      	ldr	r1, [pc, #180]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a19      	ldr	r1, [r3, #32]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	430b      	orrs	r3, r1
 800261e:	4927      	ldr	r1, [pc, #156]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_RCC_OscConfig+0x4fc>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7fe febb 	bl	80013a4 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe feb7 	bl	80013a4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e037      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x46a>
 8002650:	e02f      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <HAL_RCC_OscConfig+0x4fc>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fea4 	bl	80013a4 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002660:	f7fe fea0 	bl	80013a4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e020      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x498>
 800267e:	e018      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e013      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_OscConfig+0x4f4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	429a      	cmp	r2, r3
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
 80026c4:	42420060 	.word	0x42420060

080026c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0d0      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d910      	bls.n	800270c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b67      	ldr	r3, [pc, #412]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 0207 	bic.w	r2, r3, #7
 80026f2:	4965      	ldr	r1, [pc, #404]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0b8      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a58      	ldr	r2, [pc, #352]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800272e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800273c:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a52      	ldr	r2, [pc, #328]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002746:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	494d      	ldr	r1, [pc, #308]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d040      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d115      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07f      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b41      	ldr	r3, [pc, #260]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e073      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002796:	4b3d      	ldr	r3, [pc, #244]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e06b      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027a6:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4936      	ldr	r1, [pc, #216]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b8:	f7fe fdf4 	bl	80013a4 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c0:	f7fe fdf0 	bl	80013a4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e053      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	4b2d      	ldr	r3, [pc, #180]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 020c 	and.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1eb      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e8:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d210      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b24      	ldr	r3, [pc, #144]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0207 	bic.w	r2, r3, #7
 80027fe:	4922      	ldr	r1, [pc, #136]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e032      	b.n	800287e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4916      	ldr	r1, [pc, #88]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002856:	f000 f821 	bl	800289c <HAL_RCC_GetSysClockFreq>
 800285a:	4601      	mov	r1, r0
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x1c8>)
 8002868:	5cd3      	ldrb	r3, [r2, r3]
 800286a:	fa21 f303 	lsr.w	r3, r1, r3
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1cc>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1d0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fd52 	bl	8001320 <HAL_InitTick>

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
 8002890:	08003a2c 	.word	0x08003a2c
 8002894:	200000a4 	.word	0x200000a4
 8002898:	200000a8 	.word	0x200000a8

0800289c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	b490      	push	{r4, r7}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_RCC_GetSysClockFreq+0xb0>)
 80028a4:	1d3c      	adds	r4, r7, #4
 80028a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028ac:	4b28      	ldr	r3, [pc, #160]	; (8002950 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	2300      	movs	r3, #0
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d002      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x40>
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x46>
 80028da:	e02d      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028de:	623b      	str	r3, [r7, #32]
      break;
 80028e0:	e02d      	b.n	800293e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	0c9b      	lsrs	r3, r3, #18
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ee:	4413      	add	r3, r2
 80028f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	0c5b      	lsrs	r3, r3, #17
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800290e:	4413      	add	r3, r2
 8002910:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002914:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <HAL_RCC_GetSysClockFreq+0xbc>)
 800291a:	fb02 f203 	mul.w	r2, r2, r3
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
 8002926:	e004      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	4a0c      	ldr	r2, [pc, #48]	; (800295c <HAL_RCC_GetSysClockFreq+0xc0>)
 800292c:	fb02 f303 	mul.w	r3, r2, r3
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	623b      	str	r3, [r7, #32]
      break;
 8002936:	e002      	b.n	800293e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_GetSysClockFreq+0xc4>)
 800293a:	623b      	str	r3, [r7, #32]
      break;
 800293c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293e:	6a3b      	ldr	r3, [r7, #32]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3728      	adds	r7, #40	; 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bc90      	pop	{r4, r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	08003a18 	.word	0x08003a18
 8002950:	08003a28 	.word	0x08003a28
 8002954:	40021000 	.word	0x40021000
 8002958:	00f42400 	.word	0x00f42400
 800295c:	003d0900 	.word	0x003d0900
 8002960:	007a1200 	.word	0x007a1200

08002964 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <RCC_Delay+0x34>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0a      	ldr	r2, [pc, #40]	; (800299c <RCC_Delay+0x38>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0a5b      	lsrs	r3, r3, #9
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	fb02 f303 	mul.w	r3, r2, r3
 800297e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002980:	bf00      	nop
  }
  while (Delay --);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1e5a      	subs	r2, r3, #1
 8002986:	60fa      	str	r2, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f9      	bne.n	8002980 <RCC_Delay+0x1c>
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	200000a4 	.word	0x200000a4
 800299c:	10624dd3 	.word	0x10624dd3

080029a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e053      	b.n	8002a5a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fe faa7 	bl	8000f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	ea42 0103 	orr.w	r1, r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	0c1a      	lsrs	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f002 0204 	and.w	r2, r2, #4
 8002a38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69da      	ldr	r2, [r3, #28]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b088      	sub	sp, #32
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_SPI_Transmit+0x22>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e11e      	b.n	8002cc2 <HAL_SPI_Transmit+0x260>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a8c:	f7fe fc8a 	bl	80013a4 <HAL_GetTick>
 8002a90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d002      	beq.n	8002aa8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aa6:	e103      	b.n	8002cb0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_SPI_Transmit+0x52>
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ab8:	e0fa      	b.n	8002cb0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2203      	movs	r2, #3
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	88fa      	ldrh	r2, [r7, #6]
 8002ad2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b00:	d107      	bne.n	8002b12 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d007      	beq.n	8002b30 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b38:	d14b      	bne.n	8002bd2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_SPI_Transmit+0xe6>
 8002b42:	8afb      	ldrh	r3, [r7, #22]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d13e      	bne.n	8002bc6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	881a      	ldrh	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	1c9a      	adds	r2, r3, #2
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b6c:	e02b      	b.n	8002bc6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d112      	bne.n	8002ba2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	881a      	ldrh	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	1c9a      	adds	r2, r3, #2
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ba0:	e011      	b.n	8002bc6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ba2:	f7fe fbff 	bl	80013a4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d803      	bhi.n	8002bba <HAL_SPI_Transmit+0x158>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d102      	bne.n	8002bc0 <HAL_SPI_Transmit+0x15e>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bc4:	e074      	b.n	8002cb0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ce      	bne.n	8002b6e <HAL_SPI_Transmit+0x10c>
 8002bd0:	e04c      	b.n	8002c6c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_SPI_Transmit+0x17e>
 8002bda:	8afb      	ldrh	r3, [r7, #22]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d140      	bne.n	8002c62 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	7812      	ldrb	r2, [r2, #0]
 8002bec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c06:	e02c      	b.n	8002c62 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d113      	bne.n	8002c3e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	330c      	adds	r3, #12
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c3c:	e011      	b.n	8002c62 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c3e:	f7fe fbb1 	bl	80013a4 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d803      	bhi.n	8002c56 <HAL_SPI_Transmit+0x1f4>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d102      	bne.n	8002c5c <HAL_SPI_Transmit+0x1fa>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c60:	e026      	b.n	8002cb0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1cd      	bne.n	8002c08 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	6839      	ldr	r1, [r7, #0]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fe77 	bl	8003964 <SPI_EndRxTxTransaction>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e000      	b.n	8002cb0 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002cae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b088      	sub	sp, #32
 8002cce:	af02      	add	r7, sp, #8
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce6:	d112      	bne.n	8002d0e <HAL_SPI_Receive+0x44>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10e      	bne.n	8002d0e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f8e9 	bl	8002edc <HAL_SPI_TransmitReceive>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	e0e2      	b.n	8002ed4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_SPI_Receive+0x52>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e0db      	b.n	8002ed4 <HAL_SPI_Receive+0x20a>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d24:	f7fe fb3e 	bl	80013a4 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d002      	beq.n	8002d3c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
 8002d38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d3a:	e0c2      	b.n	8002ec2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_SPI_Receive+0x7e>
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d4c:	e0b9      	b.n	8002ec2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2204      	movs	r2, #4
 8002d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	88fa      	ldrh	r2, [r7, #6]
 8002d66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	88fa      	ldrh	r2, [r7, #6]
 8002d6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d94:	d107      	bne.n	8002da6 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d007      	beq.n	8002dc4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d162      	bne.n	8002e92 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002dcc:	e02e      	b.n	8002e2c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d115      	bne.n	8002e08 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f103 020c 	add.w	r2, r3, #12
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	7812      	ldrb	r2, [r2, #0]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e06:	e011      	b.n	8002e2c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e08:	f7fe facc 	bl	80013a4 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d803      	bhi.n	8002e20 <HAL_SPI_Receive+0x156>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1e:	d102      	bne.n	8002e26 <HAL_SPI_Receive+0x15c>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e2a:	e04a      	b.n	8002ec2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1cb      	bne.n	8002dce <HAL_SPI_Receive+0x104>
 8002e36:	e031      	b.n	8002e9c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d113      	bne.n	8002e6e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	b292      	uxth	r2, r2
 8002e52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	1c9a      	adds	r2, r3, #2
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e6c:	e011      	b.n	8002e92 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e6e:	f7fe fa99 	bl	80013a4 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d803      	bhi.n	8002e86 <HAL_SPI_Receive+0x1bc>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d102      	bne.n	8002e8c <HAL_SPI_Receive+0x1c2>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002e90:	e017      	b.n	8002ec2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1cd      	bne.n	8002e38 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	6839      	ldr	r1, [r7, #0]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fd0d 	bl	80038c0 <SPI_EndRxTransaction>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
 8002ebe:	e000      	b.n	8002ec2 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002ec0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08c      	sub	sp, #48	; 0x30
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002eea:	2301      	movs	r3, #1
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_SPI_TransmitReceive+0x26>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e18a      	b.n	8003218 <HAL_SPI_TransmitReceive+0x33c>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f0a:	f7fe fa4b 	bl	80013a4 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d00f      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0x70>
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f32:	d107      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d103      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x68>
 8002f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d003      	beq.n	8002f4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f44:	2302      	movs	r3, #2
 8002f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f4a:	e15b      	b.n	8003204 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_SPI_TransmitReceive+0x82>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_SPI_TransmitReceive+0x82>
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f64:	e14e      	b.n	8003204 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d003      	beq.n	8002f7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2205      	movs	r2, #5
 8002f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	887a      	ldrh	r2, [r7, #2]
 8002f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	887a      	ldrh	r2, [r7, #2]
 8002fa2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d007      	beq.n	8002fce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fd6:	d178      	bne.n	80030ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_SPI_TransmitReceive+0x10a>
 8002fe0:	8b7b      	ldrh	r3, [r7, #26]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d166      	bne.n	80030b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	881a      	ldrh	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	1c9a      	adds	r2, r3, #2
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800300a:	e053      	b.n	80030b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b02      	cmp	r3, #2
 8003018:	d11b      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x176>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d016      	beq.n	8003052 <HAL_SPI_TransmitReceive+0x176>
 8003024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003026:	2b01      	cmp	r3, #1
 8003028:	d113      	bne.n	8003052 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	881a      	ldrh	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	1c9a      	adds	r2, r3, #2
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d119      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x1b8>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d014      	beq.n	8003094 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	b292      	uxth	r2, r2
 8003076:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	1c9a      	adds	r2, r3, #2
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003090:	2301      	movs	r3, #1
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003094:	f7fe f986 	bl	80013a4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d807      	bhi.n	80030b4 <HAL_SPI_TransmitReceive+0x1d8>
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d003      	beq.n	80030b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030b2:	e0a7      	b.n	8003204 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1a6      	bne.n	800300c <HAL_SPI_TransmitReceive+0x130>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1a1      	bne.n	800300c <HAL_SPI_TransmitReceive+0x130>
 80030c8:	e07c      	b.n	80031c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_SPI_TransmitReceive+0x1fc>
 80030d2:	8b7b      	ldrh	r3, [r7, #26]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d16b      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030fe:	e057      	b.n	80031b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d11c      	bne.n	8003148 <HAL_SPI_TransmitReceive+0x26c>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d017      	beq.n	8003148 <HAL_SPI_TransmitReceive+0x26c>
 8003118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d114      	bne.n	8003148 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330c      	adds	r3, #12
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b01      	cmp	r3, #1
 8003154:	d119      	bne.n	800318a <HAL_SPI_TransmitReceive+0x2ae>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d014      	beq.n	800318a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003186:	2301      	movs	r3, #1
 8003188:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800318a:	f7fe f90b 	bl	80013a4 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003196:	429a      	cmp	r2, r3
 8003198:	d803      	bhi.n	80031a2 <HAL_SPI_TransmitReceive+0x2c6>
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d102      	bne.n	80031a8 <HAL_SPI_TransmitReceive+0x2cc>
 80031a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031ae:	e029      	b.n	8003204 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1a2      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x224>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d19d      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fbcb 	bl	8003964 <SPI_EndRxTxTransaction>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d006      	beq.n	80031e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80031e0:	e010      	b.n	8003204 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	e000      	b.n	8003204 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003202:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003214:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003218:	4618      	mov	r0, r3
 800321a:	3730      	adds	r7, #48	; 0x30
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
 800322c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_SPI_TransmitReceive_DMA+0x20>
 800323c:	2302      	movs	r3, #2
 800323e:	e0e3      	b.n	8003408 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800324e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003256:	7dbb      	ldrb	r3, [r7, #22]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d00d      	beq.n	8003278 <HAL_SPI_TransmitReceive_DMA+0x58>
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003262:	d106      	bne.n	8003272 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <HAL_SPI_TransmitReceive_DMA+0x52>
 800326c:	7dbb      	ldrb	r3, [r7, #22]
 800326e:	2b04      	cmp	r3, #4
 8003270:	d002      	beq.n	8003278 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003272:	2302      	movs	r3, #2
 8003274:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003276:	e0c2      	b.n	80033fe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800328e:	e0b6      	b.n	80033fe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b04      	cmp	r3, #4
 800329a:	d003      	beq.n	80032a4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2205      	movs	r2, #5
 80032a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	887a      	ldrh	r2, [r7, #2]
 80032ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	887a      	ldrh	r2, [r7, #2]
 80032c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d108      	bne.n	80032f8 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	4a49      	ldr	r2, [pc, #292]	; (8003410 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80032ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f2:	4a48      	ldr	r2, [pc, #288]	; (8003414 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28
 80032f6:	e007      	b.n	8003308 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fc:	4a46      	ldr	r2, [pc, #280]	; (8003418 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80032fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003304:	4a45      	ldr	r2, [pc, #276]	; (800341c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330c:	4a44      	ldr	r2, [pc, #272]	; (8003420 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800330e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003314:	2200      	movs	r2, #0
 8003316:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	4619      	mov	r1, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800332e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003330:	f7fe f9c6 	bl	80016c0 <HAL_DMA_Start_IT>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f043 0210 	orr.w	r2, r3, #16
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003352:	e054      	b.n	80033fe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003368:	2200      	movs	r2, #0
 800336a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003370:	2200      	movs	r2, #0
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003380:	2200      	movs	r2, #0
 8003382:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	4619      	mov	r1, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800339c:	f7fe f990 	bl	80016c0 <HAL_DMA_Start_IT>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 0210 	orr.w	r2, r3, #16
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80033be:	e01e      	b.n	80033fe <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d007      	beq.n	80033de <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033dc:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0220 	orr.w	r2, r2, #32
 80033ec:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0202 	orr.w	r2, r2, #2
 80033fc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003406:	7dfb      	ldrb	r3, [r7, #23]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	0800374d 	.word	0x0800374d
 8003414:	0800363d 	.word	0x0800363d
 8003418:	08003769 	.word	0x08003769
 800341c:	080036bf 	.word	0x080036bf
 8003420:	08003785 	.word	0x08003785

08003424 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	099b      	lsrs	r3, r3, #6
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10f      	bne.n	8003468 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
    return;
 8003466:	e0bf      	b.n	80035e8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_SPI_IRQHandler+0x66>
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	09db      	lsrs	r3, r3, #7
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
    return;
 8003488:	e0ae      	b.n	80035e8 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_SPI_IRQHandler+0x80>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	099b      	lsrs	r3, r3, #6
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a2 	beq.w	80035e8 <HAL_SPI_IRQHandler+0x1c4>
       && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 809b 	beq.w	80035e8 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	099b      	lsrs	r3, r3, #6
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d023      	beq.n	8003506 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d011      	beq.n	80034ee <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ce:	f043 0204 	orr.w	r2, r3, #4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	e00b      	b.n	8003506 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	693b      	ldr	r3, [r7, #16]
        return;
 8003504:	e070      	b.n	80035e8 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d014      	beq.n	800353c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	2b00      	cmp	r3, #0
 8003542:	d050      	beq.n	80035e6 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003552:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <HAL_SPI_IRQHandler+0x14c>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d034      	beq.n	80035da <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0203 	bic.w	r2, r2, #3
 800357e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d011      	beq.n	80035ac <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358c:	4a18      	ldr	r2, [pc, #96]	; (80035f0 <HAL_SPI_IRQHandler+0x1cc>)
 800358e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe f8f3 	bl	8001780 <HAL_DMA_Abort_IT>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d016      	beq.n	80035e2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b8:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <HAL_SPI_IRQHandler+0x1cc>)
 80035ba:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe f8dd 	bl	8001780 <HAL_DMA_Abort_IT>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80035d8:	e003      	b.n	80035e2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f825 	bl	800362a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80035e0:	e000      	b.n	80035e4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80035e2:	bf00      	nop
    return;
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
  }
}
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	080037c5 	.word	0x080037c5

080035f4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr

08003606 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800364a:	f7fd feab 	bl	80013a4 <HAL_GetTick>
 800364e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b20      	cmp	r3, #32
 800365c:	d029      	beq.n	80036b2 <SPI_DMAReceiveCplt+0x76>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0220 	bic.w	r2, r2, #32
 800366c:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0203 	bic.w	r2, r2, #3
 800367c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	2164      	movs	r1, #100	; 0x64
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f91c 	bl	80038c0 <SPI_EndRxTransaction>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <SPI_DMAReceiveCplt+0x58>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <SPI_DMAReceiveCplt+0x76>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff ffbd 	bl	800362a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80036b0:	e002      	b.n	80036b8 <SPI_DMAReceiveCplt+0x7c>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7ff ff9e 	bl	80035f4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036cc:	f7fd fe6a 	bl	80013a4 <HAL_GetTick>
 80036d0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d02f      	beq.n	8003740 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0220 	bic.w	r2, r2, #32
 80036ee:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	2164      	movs	r1, #100	; 0x64
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f935 	bl	8003964 <SPI_EndRxTxTransaction>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0203 	bic.w	r2, r2, #3
 800371a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f7ff ff76 	bl	800362a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800373e:	e002      	b.n	8003746 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7fc ff61 	bl	8000608 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff ff53 	bl	8003606 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff ff4e 	bl	8003618 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0203 	bic.w	r2, r2, #3
 80037a0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	f043 0210 	orr.w	r2, r3, #16
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff ff37 	bl	800362a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f7ff ff23 	bl	800362a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037fc:	e04c      	b.n	8003898 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d048      	beq.n	8003898 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003806:	f7fd fdcd 	bl	80013a4 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d902      	bls.n	800381c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d13d      	bne.n	8003898 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800382a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003834:	d111      	bne.n	800385a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383e:	d004      	beq.n	800384a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003848:	d107      	bne.n	800385a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003858:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003862:	d10f      	bne.n	8003884 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003882:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e00f      	b.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4013      	ands	r3, r2
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d1a3      	bne.n	80037fe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038d4:	d111      	bne.n	80038fa <SPI_EndRxTransaction+0x3a>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038de:	d004      	beq.n	80038ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e8:	d107      	bne.n	80038fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003902:	d117      	bne.n	8003934 <SPI_EndRxTransaction+0x74>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390c:	d112      	bne.n	8003934 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2200      	movs	r2, #0
 8003916:	2101      	movs	r1, #1
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f7ff ff67 	bl	80037ec <SPI_WaitFlagStateUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01a      	beq.n	800395a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e013      	b.n	800395c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2200      	movs	r2, #0
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff ff54 	bl	80037ec <SPI_WaitFlagStateUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e000      	b.n	800395c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2200      	movs	r2, #0
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f7ff ff36 	bl	80037ec <SPI_WaitFlagStateUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e000      	b.n	8003998 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <__libc_init_array>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	2500      	movs	r5, #0
 80039a4:	4e0c      	ldr	r6, [pc, #48]	; (80039d8 <__libc_init_array+0x38>)
 80039a6:	4c0d      	ldr	r4, [pc, #52]	; (80039dc <__libc_init_array+0x3c>)
 80039a8:	1ba4      	subs	r4, r4, r6
 80039aa:	10a4      	asrs	r4, r4, #2
 80039ac:	42a5      	cmp	r5, r4
 80039ae:	d109      	bne.n	80039c4 <__libc_init_array+0x24>
 80039b0:	f000 f822 	bl	80039f8 <_init>
 80039b4:	2500      	movs	r5, #0
 80039b6:	4e0a      	ldr	r6, [pc, #40]	; (80039e0 <__libc_init_array+0x40>)
 80039b8:	4c0a      	ldr	r4, [pc, #40]	; (80039e4 <__libc_init_array+0x44>)
 80039ba:	1ba4      	subs	r4, r4, r6
 80039bc:	10a4      	asrs	r4, r4, #2
 80039be:	42a5      	cmp	r5, r4
 80039c0:	d105      	bne.n	80039ce <__libc_init_array+0x2e>
 80039c2:	bd70      	pop	{r4, r5, r6, pc}
 80039c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039c8:	4798      	blx	r3
 80039ca:	3501      	adds	r5, #1
 80039cc:	e7ee      	b.n	80039ac <__libc_init_array+0xc>
 80039ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039d2:	4798      	blx	r3
 80039d4:	3501      	adds	r5, #1
 80039d6:	e7f2      	b.n	80039be <__libc_init_array+0x1e>
 80039d8:	08003a3c 	.word	0x08003a3c
 80039dc:	08003a3c 	.word	0x08003a3c
 80039e0:	08003a3c 	.word	0x08003a3c
 80039e4:	08003a40 	.word	0x08003a40

080039e8 <memset>:
 80039e8:	4603      	mov	r3, r0
 80039ea:	4402      	add	r2, r0
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d100      	bne.n	80039f2 <memset+0xa>
 80039f0:	4770      	bx	lr
 80039f2:	f803 1b01 	strb.w	r1, [r3], #1
 80039f6:	e7f9      	b.n	80039ec <memset+0x4>

080039f8 <_init>:
 80039f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fa:	bf00      	nop
 80039fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fe:	bc08      	pop	{r3}
 8003a00:	469e      	mov	lr, r3
 8003a02:	4770      	bx	lr

08003a04 <_fini>:
 8003a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a06:	bf00      	nop
 8003a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0a:	bc08      	pop	{r3}
 8003a0c:	469e      	mov	lr, r3
 8003a0e:	4770      	bx	lr
